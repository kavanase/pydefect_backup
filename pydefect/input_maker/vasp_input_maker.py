# -*- coding: utf-8 -*-

import numpy as np
import os
import ruamel.yaml as yaml
import shutil

from pymatgen.io.vasp import Potcar, Kpoints
from pymatgen.core.structure import Structure

from pydefect.core.defect_entry import get_num_atoms_for_elements, \
    get_num_electrons_from_potcar
from pydefect.core.supercell_dft_results import defect_center
from pydefect.input_maker.defect_initial_setting import DefectInitialSetting, \
    element_set
from pydefect.input_maker.input_maker import \
    DefectMaker, DefectInputSetMaker, print_is_being_removed, \
    print_already_exist, print_is_being_constructed, perturb_neighbors

__author__ = "Yu Kumagai"
__copyright__ = "Copyright 2017, Oba group"
__version__ = "0.1"
__maintainer__ = "Yu Kumagai"
__email__ = "yuuukuma@gmail.com"
__status__ = "Development"
__date__ = "December 4, 2017"


SETTINGS_FILE = os.path.join(os.path.expanduser("~"), ".pydefect.yaml")
MODULE_DIR = os.path.dirname(os.path.abspath(__file__))
DEFAULT_INCAR = os.path.join(MODULE_DIR, "default_INCAR")


def potcar_dir():
    """    
    Returns the name of POTCAR file directory.
    SETTINGS_FILE needs to be defined in the same module.
    """
    pydefect_yaml = None
    potcar_director_path = None
    try:
        with open(SETTINGS_FILE, "r") as f:
            pydefect_yaml = yaml.safe_load(f)
    except IOError:
        print('.pydefect.yaml cannot be opened.')

    for k, v in pydefect_yaml.items():
        if k == "DEFAULT_POTCAR":
            potcar_director_path = v

    try:
        return potcar_director_path
    except ValueError:
        print('DEFAULT_POTCAR is not set in .pydefect.yaml')


def make_potcar(dirname, elements, default_potcar_dir):
    """    
    Writes POTCAR with a list of the given elements names.
    Now, only default POTCAR files are supported.
    """    
    with open(os.path.join(dirname, "POTCAR"), 'w') as potcar:
        for e in elements:
            potcar_e = "POTCAR_" + e
            potcar_file_name = os.path.join(default_potcar_dir, potcar_e)

            with open(potcar_file_name) as pot:
                potcar.write(pot.read())


def make_incar(dirname='.', poscar="DPOSCAR", defect_in=None):
    """
    Writes INCAR based on a template in the same directory.
    ENCUT can be determined from max(ENMAX).
    """
    incar = os.path.join(dirname, 'INCAR')
    shutil.copyfile(DEFAULT_INCAR, incar)

    with open(incar, 'a') as fa:
        if defect_in:
            enmax = []
            defect_initial_setting = \
                DefectInitialSetting.from_defect_in(poscar, defect_in)

            elem_set = set()
            for intrinsic_elements in element_set(defect_initial_setting):
                elem_set.add(intrinsic_elements)
            for dopant_config in defect_initial_setting.dopant_configs:
                elem_set.add(dopant_config[0])
            for e in elem_set:
                potcar_file_name = os.path.join(potcar_dir(), "POTCAR_" + e)
                enmax.append(Potcar.from_file(potcar_file_name)[0].enmax)
            encut = str(max(enmax))
        else:
            encut = input("Input ENCUT:")
        fa.write('ENCUT = ' + encut + "\n")
        npar = input("Input NPAR:")
        fa.write('NPAR = ' + npar + "\n")
        kpar = input("Input KPAR:")
        fa.write('KPAR = ' + kpar + "\n")


def make_kpoints(dirname='.', poscar="DPOSCAR", kpts_shift=None):
    """
    Writes KPOINTS.
    """

    s = Structure.from_file(os.path.join(poscar))
    reciprocal_lattice = s.lattice.reciprocal_lattice
    kpt_mesh = [int(np.ceil(2.5 * r)) for r in reciprocal_lattice.abc]
    kpts = (tuple(kpt_mesh), )

    # Check if reciprocal lattice vectors are perpendicular to the other two.
    angles = reciprocal_lattice.angles

    if not kpts_shift:
        kpts_shift = []
        for i in range(3):
            if angles[i-2] == 90 and angles[i-1] == 90:
                kpts_shift.append(0.5)
            else:
                kpts_shift.append(0.0)

    comment = "K-point mesh generated by pydefect."
    Kpoints(comment=comment, kpts=kpts, kpts_shift=kpts_shift).\
        write_file(os.path.join(dirname, 'KPOINTS'))


class VaspDefectInputSetMaker(DefectInputSetMaker):

    def __init__(self, defect_initial_setting, filtering_words=None,
                 particular_defects=None, incar="INCAR", kpoints="KPOINTS",
                 force_overwrite=False):

        if not os.path.exists("INCAR") or not os.path.exists("KPOINTS"):
            raise VaspInputFileError("INCAR and/or KPOINTS is absent.")

        # make self._defect_initial_setting and self._defect_name_set
        super().__init__(defect_initial_setting, filtering_words,
                         particular_defects, force_overwrite)

        self._incar = incar
        self._kpoints = kpoints

        self.make_input()

    def _make_perfect_input(self):

        if self._force_overwrite:
            if os.path.exists("perfect"):
                print_is_being_removed("perfect")
                shutil.rmtree("perfect")

        if os.path.exists("perfect"):
            print_already_exist("perfect")
        else:
            print_is_being_constructed("perfect")
            os.makedirs("perfect")
            self._defect_initial_setting.structure.to(
                filename=os.path.join("perfect", "POSCAR"))
            shutil.copyfile(self._incar, os.path.join("perfect", "INCAR"))
            shutil.copyfile(self._kpoints, os.path.join("perfect", "KPOINTS"))
            elements = self._defect_initial_setting.structure.symbol_set
            make_potcar("perfect", elements, potcar_dir())

    def _make_defect_input(self, defect_name):

        # TODO: check if the defect_name is proper or not.
        if self._force_overwrite:
            if os.path.exists(defect_name):
                print_is_being_removed(defect_name)
                shutil.rmtree(defect_name)

        if os.path.exists(defect_name):
            print_already_exist(defect_name)
        else:
            print_is_being_constructed(defect_name)
            os.makedirs(defect_name)

            # Constructs three POSCAR-type files
            # POSCAR-Initial: POSCAR with a defect
            # POSCAR-DisplacedInitial: POSCAR with perturbation near the defect
            # POSCAR: POSCAR-DisplacedInitial when neighboring atoms are
            #         perturbed, otherwise POSCAR-Initial
            d = DefectMaker(
                defect_name,
                self._defect_initial_setting.structure,
                self._defect_initial_setting.irreducible_sites,
                self._defect_initial_setting.interstitial_coords).defect
            d.to_json_file(os.path.join(defect_name, "defect_entry.json"))
            d.initial_structure.to(
                filename=os.path.join(defect_name, "POSCAR-Initial"))

            if not self._defect_initial_setting.distance == 0.0:
                center = defect_center(d)
#                center = defect_center(d.initial_structure, d)
                perturbed_defect_structure, perturbed_sites = \
                    perturb_neighbors(d.initial_structure,
                                      center,
                                      self._defect_initial_setting.cutoff,
                                      self._defect_initial_setting.distance)
                perturbed_defect_structure.\
                    to(filename=os.path.join(defect_name,
                                             "POSCAR-DisplacedInitial"))
                shutil.copyfile(
                    os.path.join(defect_name, "POSCAR-DisplacedInitial"),
                    os.path.join(defect_name, "POSCAR"))
            else:
                shutil.copyfile(
                    os.path.join(defect_name, "POSCAR-Initial"),
                    os.path.join(defect_name, "POSCAR"))

            # Construct POTCAR file
            elements = d.initial_structure.symbol_set
            make_potcar(defect_name, elements, potcar_dir())

            # Construct INCAR file
            shutil.copyfile(self._incar, os.path.join(defect_name, "INCAR"))
            nions = get_num_atoms_for_elements(d.initial_structure)
            nelect = get_num_electrons_from_potcar(
                 os.path.join(defect_name, "POTCAR"), nions, d.charge)

            with open(os.path.join(defect_name, 'INCAR'), 'a') as fa:
                fa.write('NELECT = ' + str(nelect))

            # copy KPOINTS file
            shutil.copyfile(self._kpoints, os.path.join(defect_name, "KPOINTS"))


class VaspInputFileError(Exception):
    pass


