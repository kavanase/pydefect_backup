import sys
import math
import numpy as np
from pymatgen.io.vasp.inputs import Poscar as Poscar_pmg
from ase.io.vasp import read_vasp
from ase_cython import find_optimal_cell_shape
from ase.build import get_deviation_from_optimal_cell_shape
from ase.build import make_supercell


class NoStructureFoundError(Exception):
    pass


def recommend_supercell_ase(poscar_path, criterion=0.5,
                            min_natom=50, max_natom=400): # max_natom = 400
    poscar_ase= read_vasp(poscar_path)
    poscar_pmg = Poscar_pmg.from_file(poscar_path)
    unitcell_natoms = int(str(poscar_ase.get_number_of_atoms()))
    min_atom_modified = \
        min_natom + unitcell_natoms - (min_natom % unitcell_natoms)
    print("natom of unitcell = " + str(unitcell_natoms))
    print("criterion = " + str(criterion))
    screened_supercell = None
    screened_natom = None
    screened_dev = None
    screened_p = None
    min_dev = float("inf")
    for natom in range(max_natom+1, min_atom_modified, -unitcell_natoms):
        print("-"*20+"loop at natom = {0}".format(natom)+"-"*20)
        num_target_cell = math.floor(float(natom) / int(unitcell_natoms))
        print("num_target_cell = {0}".format(int(num_target_cell)))
        P = find_optimal_cell_shape(poscar_ase.cell, num_target_cell)
        structure_supercell = poscar_pmg.structure * P
        natom_super = str(structure_supercell.num_sites)
        dev = get_deviation_from_optimal_cell_shape(np.dot(P, poscar_ase.cell))
        print("natom(super) = " + natom_super + " , dev = " + str(dev))
        if dev < criterion:
            screened_supercell = structure_supercell
            screened_natom = natom_super
            screened_dev = dev
            screened_p = P
        else:
            if dev < min_dev:
                min_dev = dev
            continue

    print("-" * 50)

    if screened_supercell is None:
        raise NoStructureFoundError("Not found supercell which dev is"
                                    " smaller than criterion. Minimum dev is "
                                    + str(min_dev))
        sys.exit()

    print("Found supercell which dev is smaller than criterion.")
    print("SCREENED: natom(super) = " + str(screened_natom) +
          " , dev = " + str(screened_dev))

    axis = screened_supercell.lattice.matrix
    norms = [np.linalg.norm(v) for v in axis]

    def degree_angle(v1, v2):
        l1 = np.linalg.norm(v1)
        l2 = np.linalg.norm(v2)
        dot = np.dot(v1, v2)
        cos = dot / (l1 * l2)
        rad = np.arccos(cos)
        return np.degrees(rad)
    alpha = degree_angle(axis[1], axis[2])
    beta = degree_angle(axis[2], axis[0])
    gamma = degree_angle(axis[0], axis[1])
    print("screened_natom", screened_natom)
    label_str = "Generated by ASE. length = ( {0} ), angle=( {1}, {2}, {3} ), "\
                "natom= {4}".format(norms , alpha, beta, gamma, screened_natom)
    print(label_str)
    print("supercell = ")
    print(screened_p)
    poscar_str = screened_supercell.to(fmt="poscar").splitlines(True)
    poscar_str[0] = label_str + "\n"
    with open(poscar_path+"-supercell", 'w') as fw:
        for line in poscar_str:
            fw.write(line)


if __name__ == "__main__":
    recommend_supercell_ase(sys.argv[1])
