# -*- coding: utf-8 -*-
import os
import tempfile
import unittest

from pymatgen.core.structure import Structure

from pydefect.input_maker.defect_initial_setting import charge_set_range, \
    get_electronegativity, get_oxidation_state, DefectInitialSetting
from pydefect.core.irreducible_site import IrreducibleSite

__author__ = "Yu Kumagai"
__maintainer__ = "Yu Kumagai"

test_dir = os.path.join(os.path.dirname(__file__), "..", "..", "..",
                        "test_files", "input_maker")


class ExtendedRangeTest(unittest.TestCase):
    def test_range(self):
        expected_positive = [0, 1, 2]
        actual_positive = [i for i in charge_set_range(2)]
        self.assertEqual(actual_positive, expected_positive)

        expected_negative = [-2, -1, 0]
        actual_negative = [i for i in charge_set_range(-2)]
        self.assertEqual(actual_negative, expected_negative)

        expected_positive = [-1, 0, 1, 2, 3]
        actual_positive = [i for i in charge_set_range(3)]
        self.assertEqual(actual_positive, expected_positive)

        expected_negative = [-3, -2, -1, 0, 1]
        actual_negative = [i for i in charge_set_range(-3)]
        self.assertEqual(actual_negative, expected_negative)


class GetElectronegativityTest(unittest.TestCase):
    def test_success(self):
        true_element = "Mg"
        expected = 1.31
        self.assertEqual(get_electronegativity(true_element), expected)

    def test_fail(self):
        fake_element = "Yk"
        expected = 0
        self.assertEqual(get_electronegativity(fake_element), expected)


class GetOxidationStateTest(unittest.TestCase):
    def test_success(self):
        true_element = "Mg"
        expected = 2
        self.assertEqual(get_oxidation_state(true_element), expected)

    def test_fail(self):
        fake_element = "Yk"
        expected = 0
        self.assertEqual(get_oxidation_state(fake_element), expected)


# TODO: write test_print_dopant_info
class DopantInfoTest(unittest.TestCase):
    pass


# class ElementSetTest(unittest.TestCase):
#     def test(self):
#         mgo_from_defect_in = \
#             DefectInitialSetting.from_defect_in(
#                 poscar=os.path.join(test_dir, "POSCAR-MgO64atoms"),
#                 defect_in_file=os.path.join(test_dir, "defect.in.example"))
#         print(element_set(mgo_from_defect_in))


class DefectInitialSettingTest(unittest.TestCase):

    def setUp(self):
        """
        The following condition can be generated by typing

        python3 defect_initial_setting.py -p POSCAR-MgO64atoms -d Al N
        --included Va_O1_-1 Va_O1_-2 --excluded Va_O1_1 Va_O1_2
        --displacement_distance 0.15 --symprec 0.001 --cutoff 2.0 -e 4
        -i 0.1 0.1 0.1
        """
        structure = Structure.\
            from_file(os.path.join(test_dir, "POSCAR-MgO64atoms"))

        space_group_symbol = "Fm-3m"
        cell_multiplicity = 32
        transformation_matrix = [2, 2, 2]
        coordination_distances_Mg = {"O": [2.12, 2.12, 2.12, 2.12, 2.12, 2.12]}
        coordination_distances_O = {"Mg": [2.12, 2.12, 2.12, 2.12, 2.12, 2.12]}

        Mg1 = IrreducibleSite(irreducible_name="Mg1",
                              element="Mg",
                              first_index=1,
                              last_index=32,
                              representative_coords=[0.0, 0.0, 0.0],
                              wyckoff="a",
                              site_symmetry="m-3m",
                              coordination_distances=coordination_distances_Mg)
        O1 = IrreducibleSite(irreducible_name="O1",
                             element="O",
                             first_index=33,
                             last_index=64,
                             representative_coords=[0.25, 0.25, 0.25],
                             wyckoff="b",
                             site_symmetry="m-3m",
                             coordination_distances=coordination_distances_O)
        irreducible_sites = [Mg1, O1]

        dopant_configs = [["Al", "Mg"], ["Al", "O"], ["N", "Mg"], ["N", "O"]]
        antisite_configs = [["Mg", "O"], ["O", "Mg"]]
        interstitial_names = ["i1"]
        included = ["Va_O1_-1", "Va_O1_-2"]
        excluded = ["Va_O1_1", "Va_O1_2"]
        distance = 0.15
        cutoff = 2.0
        symprec = 0.001
        angle_tolerance = 5
        oxidation_states = {"Mg": 2, "O": -2, "Al": 3, "N": -3}
        electronegativity = {"Mg": 1.31, "O": 3.44, "Al": 1.61, "N": 3.04}

        self.MgO = DefectInitialSetting(structure,
                                        space_group_symbol,
                                        transformation_matrix,
                                        cell_multiplicity,
                                        irreducible_sites,
                                        dopant_configs,
                                        antisite_configs,
                                        interstitial_names,
                                        included,
                                        excluded,
                                        distance,
                                        cutoff,
                                        symprec,
                                        angle_tolerance,
                                        oxidation_states,
                                        electronegativity)

    def test_dict(self):
        # roundtrip: object -> dict -> object
        mgo_dict = self.MgO.as_dict()
        mgo_from_dict = DefectInitialSetting.from_dict(mgo_dict)
        # Note: irreducible_sites usually return pointers, so __eq__ is
        # overloaded in DefectInitialSetting.
        print(mgo_from_dict.as_dict())
        print(self.MgO.as_dict())
        self.assertTrue(mgo_from_dict.as_dict() == self.MgO.as_dict())
        self.MgO.to()

    def test_to_json_file(self):
        # round trip test
        with tempfile.NamedTemporaryFile() as fp:
            tmp_json = fp.name
            self.MgO.to_json_file(tmp_json)
            mgo_from_json = DefectInitialSetting.load_json(tmp_json)
            self.assertTrue(mgo_from_json.as_dict() == self.MgO.as_dict())

    # def test_from_defect_in(self):
    #     mgo_from_defect_in = \
    #         DefectInitialSetting.from_defect_in(
    #             poscar=os.path.join(test_dir, "POSCAR-MgO64atoms"),
    #             defect_in_file=os.path.join(test_dir, "defect.in.example"))

        # self.assertTrue(mgo_from_defect_in == self.MgO)

    def test_from_basic_settings(self):
        mgo_from_basic_settings = \
            DefectInitialSetting.from_basic_settings(
                structure=Structure.from_file(
                    os.path.join(test_dir, "POSCAR-MgO64atoms")),
                transformation_matrix=[2, 2, 2],
                cell_multiplicity=32,
                dopants=["Al", "N"],
                is_antisite=True,
                interstitial_site_names=["i1"],
                en_diff=4.0,
                included=["Va_O1_-1", "Va_O1_-2"],
                excluded=["Va_O1_1", "Va_O1_2"],
                displacement_distance=0.15,
                cutoff=2.0,
                symprec=0.001)

        print(mgo_from_basic_settings.interstitials["i1"])
#        self.assertTrue(mgo_from_basic_settings == self.MgO)

    def test_make_defect_name_set(self):
        # Sequence of expected is changed for easy view. Thus, sort is needed
        # for comparison.
        expected = \
            ['Va_Mg1_-2', 'Va_Mg1_-1', 'Va_Mg1_0', 'Va_O1_2', 'Mg_i1_0',
             'Mg_i1_1', 'Mg_i1_2', 'O_i1_-2', 'O_i1_-1', 'O_i1_0', 'N_i1_-3',
             'N_i1_-2', 'N_i1_-1', 'N_i1_0', 'N_i1_1', 'Al_i1_-1', 'Al_i1_0',
             'Al_i1_1', 'Al_i1_2', 'Al_i1_3', 'Mg_O1_0', 'Mg_O1_1', 'Mg_O1_2',
             'Mg_O1_3', 'Mg_O1_4', 'O_Mg1_-4', 'O_Mg1_-3', 'O_Mg1_-2',
             'O_Mg1_-1', 'O_Mg1_0', 'Al_Mg1_-1', 'Al_Mg1_0', 'Al_Mg1_1',
             'Al_O1_-1', 'Al_O1_0', 'Al_O1_1', 'Al_O1_2', 'Al_O1_3', 'Al_O1_4',
             'Al_O1_5', 'N_Mg1_-5', 'N_Mg1_-4', 'N_Mg1_-3', 'N_Mg1_-2',
             'N_Mg1_-1', 'N_Mg1_0', 'N_Mg1_1', 'N_O1_-1', 'N_O1_0', 'N_O1_1']

        actual = [str(i) for i in self.MgO.make_defect_name_set()]
        self.assertEqual(sorted(actual), sorted(expected))


if __name__ == "__main__":
    unittest.main()
