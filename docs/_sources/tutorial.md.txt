# Tutorial of pydefect
-----------------------

We here illustrate how to use the pydefect code.

**Note1: Pydefect supports only the vienna ab-initio simulation package (VASP), so we suppose its input and output file names (e.g., POSCAR, POTCAR, OUTCAR) 
and computational techniques (e.g., periodic boundary condition) used in VASP.**

**Note2: Units used in pydefect are eV for energy and <span>&#8491;</span> for length following the vasp convention.**

**Note3: Only nonmagnetic host materials are assumed.**

Usually, a point-defect calculation in a non-metallic solid is intricate as shown in the workflow below,
and, therefore, is a time-consuming task and researchers are prone to make mistakes.
The main purpose of pydefect is to help researchers by automating almost all point-defect calculation processes. 

![](flowchart.png)

Here, we suppose the following directory tree; one can see
some tasks can be performed concurrently, while others must follow some other tasks.
The `<project_name>` is usually the name of material or that with crystal structure, e.g., rutile-TiO<sub>2</sub>.
```
<project_name>
 │
 ├ pydefect.yaml
 │
 ├ unitcell/ ── structure_opt/
 │            ├ band/
 │            └ dos/
 │            
 ├ competing_phases/ ── <competing_phase 1>
 │                    ├── <competing_phase 2>
 │                    ....
 │  
 └ defects/ ── perfect/  
              ├─ Va_X_0/
              ├─ Va_X_1/
              ├─ Va_X_2/
             ...
```
We recommend the users to follow the same directory structure as the default of `pydefect` assumes it. 
Details of the process are examined step by step using an example of MgO calculated using the PBEsol functional, which is a default of `pydefect`.
Other examples are also shown in the subsequent tutorials.

### 1. Relaxation of the unit cell
Point-defect calculations are generally performed at a fully relaxed structures by the given functional and projector augmented wave (PAW) potentials,
as it avoids the artificial strain and stress which could be responsible for the unwanted supercell size dependence. 
Therefore, one usually begins with optimizing lattice constants and fractional coordinates of the atomic positions in the unitcell. 

We first prepare `POSCAR` of the pristine bulk unitcell, and create `unitcell/` directory and `unitcell/structure_opt/` 
sub-directory (`mkdir -p unitcell/structure_opt/`) and move there. 
(In this tutorial, `/` means a directory at any time.)
When `pydefect` needs to construct the vasp input files, namely INCAR, POTCAR, KPOINTS files,
we use `VISE` (=`vasp integrated supporting environment`) code written by Kumagai largely on the basis of [pymatgen](http://pymatgen.org), which can generate them for various tasks and exchange-correlation (XC) functionals.
Therefore, as shown [pymatgen web page 1](https://pymatgen.org/usage.html) or [2](https://pymatgen.org/_modules/pymatgen/io/vasp/inputs.html), 
we need to set the PMG_DEFAULT_FUNCTIONAL and PMG_VASP_PSP_DIR in the .pmgrc.yaml file at the home directory, e.g.,
```
PMG_DEFAULT_FUNCTIONAL: PBE_54
PMG_MAPI_KEY: xxxxxxxxxxxxxxxx
PMG_VASP_PSP_DIR: /home/kumagai/potcars/
```
Here, `PMG_MAPI_KEY` is required for querying `POSCAR`s of competing materials as shown later.

Input files for optimizing a unitcell using the PBEsol functional are generated by the following command.
Here, the pbesol functional is a default, so if one wants to change the XC functional, use the `-x` option. 
```
python $PATH_TO_VISE/vise/vise/main.py vasp_set
```
where `vasp_set`, or its abbreviation (`vs`) , is a sub-command option of VISE main function.
In pydefect and VISE, all the sub-commands have their own abbreviations for advanced users.

In `VISE`, we provide the default `POTCAR` set regularly we use, but of course, users can adopt their favorite `POTCAR` set.
In `pydefect` and `VISE`, users can control various types of parameters using the `pydefect.yaml` and `vise.yaml` files.
For example, for `vasp_set` and `defect_vasp_set` which appear later, we can use `potcar_set` key as follows
If you write `pydefect.yaml` as 
```
potcar_set: Mg_pv O_h
```
Then, the Mg_pv and O_h `POTCAR` files are used instead of the normal Mg and O `POTCAR` files.

Note that `pydefect` and `VISE` try to find the `pydefect.yaml` and `vise.yaml` files 
from the current working directory to the parent directly up to the home or root directory.
Therefore, when `pydefect.yaml` is located at the top directory of the project as shown above directory tree,
the parameters are always used for the `pydefect` commands.
There are so many keys for `pydefect.yaml`, which is written at the top of the `main.py` file.
For example, one can write in `vise.yaml` 
```
xc: hse
```
for XC functional.

There are also many options for each sub-command. One can always refer its help by e.g.,
```
python $PATH_TO_VISE/vise/vise/main.py vs -h
```
for details.

Note that the structure optimization must be generally iterated with 1.3 times larger cutoff energy 
until the forces and stresses converge at the first ionic step so as to reduce the errors caused by the Pulay Stress to an acceptable accuracy.
See [vasp manual](https://cms.mpi.univie.ac.at/vasp/vasp/Volume_vs_energy_volume_relaxations_Pulay_Stress.html) or [wikipedia](https://cms.mpi.univie.ac.at/vasp/vasp/Volume_vs_energy_volume_relaxations_Pulay_Stress.html) for details.
Such iteration of the vasp calculations is not supported by pydefect, but one can easily write the simple runshell scripts to do so.

### 2. Calculation of band, DOS, and dielectric tensor

We then calculate the band structure (BS), density of states (DOS), and dielectric constant.
In the defect calculations, the BS and DOS are used for determining the valence band maximum (VBM) and conduction band minimum (CBM), 
while the dielectric constant, a sum of electronic and ionic dielectric tensors, is needed for correcting the defect formation energies and eigenvalues of defect-induced deep states.

First, we create `band/`, `dos/` and `dielectric/` in `unitcell/` and copy POSCAR from `unitcell/structure_opt` and type the following command in each directory,
```
python $PATH_TO_VISE/vise/vise/main.py vs -t band
```
```
python $PATH_TO_VISE/vise/vise/main.py vs -t dos
```
```
python $PATH_TO_VISE/vise/vise/main.py vs -t dielectric_dfpt
```
and run the vasp calculations.

Here, the band path is determined based upon the [seekpath code](https://www.materialscloud.org/work/tools/seekpath), 
so if one uses the plot for publication or presentation, please cite the following paper.
- [Y. Hinuma, G. Pizzi, Y. Kumagai, F. Oba, I. Tanaka, Band structure diagram paths based on crystallography, Comp. Mat. Sci. 128, 140 (2017).](https://www.sciencedirect.com/science/article/pii/S0927025616305110?via%3Dihub) 
  DOI: 10.1016/j.commatsci.2016.10.015 (the "HPKOT" paper; arXiv version: arXiv:1602.06402).

`VISE` also provides the plotters of BS and DOS based on with `plot_band` (=`pb`) and `plot_dos` (=`pd`) sub-commands.
Type the following commands in `band/` and  `dos/`, respectively. 
```
python $PATH_TO_VISE/vise/vise/main.py pb -f band.pdf
```
```
python $PATH_TO_VISE/vise/vise/main.py pd -f dos.pdf
```

### 3. Gathering unitcell information related to point-defect calculations

We next collect the bulk information relevant to point-defect calculations, namely band edges (for defect-formation energies), 
electronic and ionic contributions to dielectric tensor (for corrections), unitcell volume, and unitcell DOS (both for carrier and defect concentrations),
using the `unitcell_results` (=`ur`) sub-command.
```
python $PATH_TO_PYDEFECT/pydefect/pydefect/main.py ur --static_diele_dir dielectric --ionic_diele_dir dielectric --band_edge_dir band --volume_dir dielectric --total_dos_dir dos --json_file unitcell.json -o OUTCAR-finish -p POSCAR-finish -v vasprun.xml
```
In this command, we suppose that OUTCAR and CONTCAR are renamed to OUTCAR-finish and POSCAR-finish, respectively, as an example, using `-o` and `-p` options.
If you write the following in the `pydefect.yaml` file, 
```
# VASP file names
outcar: OUTCAR-finish
contcar: POSCAR-finish
vasprun: vasprun.xml
procar: PROCAR
# directory names
volume_dir: unitcell/structure_opt
static_diele_dir: unitcell/dielectric
ionic_diele_dir: unitcell/dielectric
band_edge_dir: unitcell/band
dos_dir: unitcell/dos
```
it's okay to simply type
```
python $PATH_TO_PYDEFECT/pydefect/pydefect/main.py ur
```

With this command, `unitcell.json` is generated, which will be used for the analysis later.
Generally, json files are less readable for human beings, so we implement `print` option to generate readable output from json files, like
```
python $PATH_TO_PYDEFECT/pydefect/pydefect/main.py ur --print
```
Here, we show an example of the unitcell information.
```
vbm (eV): 3.067
cbm (eV): 7.726
static dielectric tensor: 
 [3.16, 0.0, 0.0]
 [-0.0, 3.16, 0.0]
 [-0.0, -0.0, 3.16]
ionic dielectric tensor: 
 [6.81, 0.0, -0.0]
 [0.0, 6.81, -0.0]
 [-0.0, -0.0, 6.81]
total dielectric tensor: 
 [9.97, 0.0, 0.0]
 [0.0, 9.97, 0.0]
 [-0.0, -0.0, 9.97]
volume (A^3): 18.65
Total DOS: Exists
```
Since the total dos data is so large, we show only whether it is set or not. 

### 4. Calculation of competing phases
When a defect is introduced, atoms are exchanged with the hypothetical atomic reservoirs within the thermodynamics framework.
In order to calculate a free energy of defect formation that is approximated with the defect formation energy without entropic effect in most cases,
we need to determine chemical potentials of exchanged atoms accompanied with creating defects.
Usually, we consider the chemical potentials at the condition where competing phases coexist with the host material,
which are determined from the chemical potential diagram.

For this purpose, we create directories in `competing_phases/` for competing phases including VASP input sets in each directory.
Using the `chempotdiag` library developed and managed by Akira Takahashi, 
we can retrieve POSCARs of the stable or slightly unstable competing phases from [the Materials Project (MP)](https://materialsproject.org).
For this purpose, one needs [the API keys](https://materialsproject.org/open) of the MP as mentioned above.
Here, as an example, we obtain the competing materials with MgO of which energy above hull is less than 0.5 meV/atom using 
```
python $PATH_TO_CHEMPOTDIAG/chempotdiag/chempotdiag/main.py -m -el Mg O -ch 0.5
```
Particular molecules, namely O<sub>2</sub>, N<sub>2</sub>, F<sub>2</sub>, H<sub>2</sub>O, N<sub>2</sub>, NH<sub>3</sub>, NO<sub>2</sub>, P<sub>2</sub>, and P<sub>4</sub>, 
are not retrieved from MP but created by `chempotdiag` itself since these molecules have been calculated as solids in MP, which could be inadequate for competing phases for defect calculations.

The bulk structure, namely MgO in this example, has already been calculated, so we do not have to iterate the same calculations, 
but make a symbolic link by `ln -s ../unitcell/structure_opt MgO` after removing `Mg1O1_mp-126/`.
At this point, you can find these directories under 2019/8/28),
```
Mg4O8_mp-2589/  Mg9_mp-1094122/  MgO@  O2molecule_pydefect/
```

We then generate `INCAR`, `POTCAR`, `KPOINTS` files for other competing solids or molecules.
In order to compare the total energies, we need to use the same cutoff energy, `ENCUT`, which is increased to 1.3 times of max `ENMAX` between the constituent POTCARs.
In case of MgO, `ENMAX` of Mg and O are 200.0 and 400.0, so we need to set `ENCUT = 520`, using the `vasp_oba_set` sub-command
```
python $PATH_TO_PYDEFECT/pydefect/pydefect/main.py vos -t structure_opt -is ENCUT 520 --dirs *_mp*/
```

<p>Note, if competing phases are gases, we need to change `ISIF` to 2 so as not to relax the lattice constants (see [vasp manual](https://cms.mpi.univie.ac.at/wiki/index.php/ISIF)), 
and `KPOINTS` to the &Gamma; point sampling.</p>

In such case, type as follows,
```
python $PATH_TO_PYDEFECT/pydefect/pydefect/main.py vs -t structure_opt -is ENCUT 520 ISIF 2 -vs_kw is_cluster True --dirs O2molecule_pydefect
```
where O2molecule_pydefect is a directory for the O<sub>2</sub> molecule model. 

After finishing the vasp calculations, we can generate the chemical potential diagram with
```
python $PATH_TO_CHEMPOTDIAG/chempotdiag/chempotdiag/main.py cpd -v */ -c MgO -y -s cpd.pdf
```
If you rename the CONTCAR and OUTCAR files to e.g., POSCAR-finish and OUTCAR-finish, type
```
python $PATH_TO_CHEMPOTDIAG/chempotdiag/chempotdiag/main.py cpd -v */ -p POSCAR-finish -o OUTCAR-finish -c MgO -y -s cpd.pdf
```
See help of `chempotdiag` for more other options.
Especially, there are some parameters of the partial pressure and temperature for gas phases to determine the chemical potentials.
With this command, we depict the Mg-O chemical potential diagram that is saved as `cpd.pdf` which looks like

![](cpd_MgO.png)

<!--
In ternary case, it looks like
![](cpd_BaSnO3.png)
-->

Values at the vertices at the MgO region written in `vertices_MgO.yaml` are shown as follows.
```
A: {Mg: 0.0, O: -5.910971904865118}
B: {Mg: -5.847874231666665, O: -0.06309767319845339}
compound: MgO
pressure: null
standard_energy: {Mg: -1.7294249733333331, O: -4.8720259618015485}
temperature: 0
```
Here, `standard_energy` are the energies of the most stable simple substances or simple gas phases, 
and A--B show the relative chemical potentials at the vertices shown in `cpd_MgO.pdf`. 

### 5. Construction of a supercell and defect initial setting file.
So far, we have finished the calculations of the unit cell and competing phases, and are eventually ready for point-defect calculations. 
Let's create `defect/` directory and copy unitcell `POSCAR` file from *e.g.* `unitcell/dos/` to `defect/`

We then create a supercell and an initial setting file for point defects with the `initial_setting` (=`is`) sub-command.
pydefect recommends a nearly isotropic (and sometimes cubic-like) supercell composed of moderate number of atoms.
For this purpose, use the `recommend_supercell` (=`rs`) sub-command,
```
python ~/my_bin/pydefect/pydefect/main.py is
```
Then, `DPOSCAR` that is the POSCAR for the supercell, respectively, is generated.
`UPOSCAR` is also generated if the input structure is different from the standardized primitive cell.
Although pydefect constructs `SPOSCAR` based on the *conventional* unitcell by default, 
it can also expand the *primitive* unitcell with `-pr` option.
(If centering is absent, these two are of course the same.)

It is also possible to change the lattice angle of the supercell from those of the conventional or primitive unitcell,
but not a good idea for point-defect calculations.
For example, we can make a supercell in which a-, b-, and c-axes are mutually orthogonal.
However, its lattice breaks the original hexagonal symmetry, which reduces the accuracy of the point-defect calculations.
Furthermore, it prevents determination of point group of defects.

When the Bravais lattice is rhombohedral, the lattice angle could be too small or too large (e.g., 20 or 160 degrees).
In such case, a simple supercell expansion is not adequate as the defects do not arrange evenly in the real space.
Therefore, pydefect expand the cell with changing the lattice angle.
 
Another exception is the tetragonal cell, where 45 degree rotated supercells are allowed, which is also implemented in `pydefect`.

In `pydefect`, when a user wants to use specific supercell, she/he needs to specify the cell matrix, e.g., 
```
python ~/my_bin/pydefect/pydefect/main.py is --matrix 2 1 1 
```

With `is` sub-command, we can build the `defect.in` file, which contains the full information on what kind of defects are to be generated automatically.
At the same time, `DPOSCAR`, POSCAR used for the defect calculations, is created. 

An example of `defect.in` looks as follows:
```
  Space group: Fm-3m

Transformation matrix: -2 2 2 2 -2 2 2 2 -2
Cell multiplicity: 32

   Irreducible element: Mg1
        Wyckoff letter: a
         Site symmetry: m-3m
         Cutoff radius: 2.74
          Coordination: O: 2.1 2.1 2.1 2.1 2.1 2.1
      Equivalent atoms: 0..31
Fractional coordinates: 0.5000000  0.0000000  0.0000000
     Electronegativity: 1.31
       Oxidation state: 2

   Irreducible element: O1
        Wyckoff letter: b
         Site symmetry: m-3m
         Cutoff radius: 2.74
          Coordination: Mg: 2.1 2.1 2.1 2.1 2.1 2.1
      Equivalent atoms: 32..63
Fractional coordinates: 0.7500000  0.2500000  0.2500000
     Electronegativity: 3.44
       Oxidation state: -2

Interstitials: all
Complex defects: 
Antisite defects: 

Substituted defects: 

Maximum Displacement: 0.2

Exceptionally included: 
Exceptionally excluded: 

Symprec: 0.01
Angle tolerance: 5
```
The `Coordination` is shown for the atoms whose distances from the defect are less than 1.3 times of the minimum coordination distance 
for each atom in the perfect cell.
This parameter is also controlled with the `pydefect.yaml` file.

If we want to add dopants *a posteriori*, we can type as follows.
```
python ~/my_bin/pydefect/pydefect/main.py is --print_dopant Na
```

This example of Na dopant prints 
```
   Dopant element: Na
Electronegativity: 0.93
  Oxidation state: 1
```

By inserting this with an editor to `defect.in` and modify `Substituted defects` as follows
```
  Space group: Fm-3m

Transformation matrix: -2 2 2 2 -2 2 2 2 -2
Cell multiplicity: 32

   Irreducible element: Mg1
        Wyckoff letter: a
         Site symmetry: m-3m
         Cutoff radius: 2.74
          Coordination: O: 2.1 2.1 2.1 2.1 2.1 2.1
      Equivalent atoms: 0..31
Fractional coordinates: 0.5000000  0.0000000  0.0000000
     Electronegativity: 1.31
       Oxidation state: 2

   Irreducible element: O1
        Wyckoff letter: b
         Site symmetry: m-3m
         Cutoff radius: 2.74
          Coordination: Mg: 2.1 2.1 2.1 2.1 2.1 2.1
      Equivalent atoms: 32..63
Fractional coordinates: 0.7500000  0.2500000  0.2500000
     Electronegativity: 3.44
       Oxidation state: -2

   Dopant element: Na
Electronegativity: 0.93
  Oxidation state: 1

Interstitials: all
Complex defects: 
Antisite defects: 

Substituted defects: 

Maximum Displacement: 0.2

Exceptionally included: 
Exceptionally excluded: 

Symprec: 0.01
Angle tolerance: 5
```

There are so many tips related to `defect.in`.
1. The antisites and substituted defects are determined from the difference of the electronegativity. 
   Although default is 1.0 <span>&#8491;</span>, you can change it using `-e` option to e.g., 1.5.
   ```
   python ~/my_bin/pydefect/pydefect/main.py is -e 1.5
   ```

2. The oxidation states determine the defect charge state.
   For instance, the vacancies of Sn<sup>2+</sup> takes 0, -1, -2, while those of Sn<sup>4+</sup> take 0, -1, -2, -3, -4 charge states.
   In case of interstitials, the interstitials of Sn<sup>2+</sup> takes the 0, +1, +2, while those of Sn<sup>4+</sup> take 0, +1, +2, +3, +4 charge states.
   For the antisites and substituted defects, pydefect considers all possible combinations of vacancies and interstitials.
   So, for example, Sn<sup>2+</sup>-on-S<sup>2-</sup> takes 0, +1, +2, +3, +4 charge states.
   The oxidation states are determined using the `oxi_state_guesses` method of `Composition` class in `pymatgen`.

3. By default, positions of atoms neighboring a defect are perturbed such that the symmetry is lowered, but it is unwanted in some cases.
   Then, `Maximum Displacement` is simply set to 0.


### 6. Decision of interstitial sites
In addition to vacancies and antisites, one may want to take into account the interstitials.
Most people determine them by seeing the host crystal structures, 
while there are a couple of procedures that recommend the interstitial sites,
However, it is not an easy task to speculate the most likely interstitial sites because they also depend on the substituted element in general.
the largest vacant space should be most likely interstitial sites for positively charged cations with closed shells are substituted (e.g., Mg<sup>2+</sup>, Al<sup>3+</sup>), 
as they tend not to make bonding with other atoms. 
On the other hand, in case of a proton (H<sup>+</sup>), 
it prefers to locate near O<sup>2-</sup> or N<sup>3-</sup> to form the strong O-H or N-H bonding.
Conversely, a hydride ion (H<sup>-</sup>) should prefer to locate at very much different places. 
Therefore, we need to be careful when determining the interstitial sites.

`pydefect` implements a recommendation of the interstitial sites using the unitcell charge density
using the `ChargeDensityAnalyzer` class implemented in `pymatgen`.
To use this, we need to generate `CHGCAR` based on the `POSCAR` file or `UPOSCAR` file if generated.
(Of course, if you already have `CHGCAR` at the unitcell calculations, you can use it, but be sure the structure must be the same as that used here.)
For this purpose, make `chgcar/` and copy UPOSCAR to `chgcar/POSCAR` and type
```
python $PATH_TO_VISE/vise/vise/main.py vs -t structure_opt -uis LCHARG True LWAVE False -vise_opts standardize_structure False
```
Then, type
```
python $PATH_TO_PYDEFECT/pydefect/pydefect/main.py i --chgcar CHGCAR
```
With this, one can obtain the following output.    
```
      a     b     c  Charge Density
0  0.75  0.75  0.75        1.302145
1  0.25  0.25  0.25        1.302145

++ Inequivalent indices and site symmetries ++
0 -43m
```

To add the interstitial site at e.g., 0.25  0.25  0.25, we use the `interstitial` (=`i`) sub-command like
```
python ~/my_bin/pydefect/pydefect/main.py i -c 0.25 0.25 0.25
```

`interstitials.yaml` is then generated, which show information related to the interstitial sites.
```
i1:
  representative_coords:
  - 0.125
  - 0.125
  - 0.125
  wyckoff: c
  site_symmetry: -43m
  multiplicity: 64
  coordination_distances:
    Mg:
    - 1.82
    - 1.82
    - 1.82
    - 1.82
    O:
    - 1.82
    - 1.82
    - 1.82
    - 1.82
  cutoff: 2.37
  method: manual
```
If we want to add another site at e.g. 0.25 0.25 0, interstitials.yaml is updated as follows:
```
i1:
  representative_coords:
  - 0.125
  - 0.125
  - 0.125
  wyckoff: c
  site_symmetry: -43m
  multiplicity: 64
  coordination_distances:
    Mg:
    - 1.82
    - 1.82
    - 1.82
    - 1.82
    O:
    - 1.82
    - 1.82
    - 1.82
    - 1.82
  cutoff: 2.37
  method: manual
i2:
  representative_coords:
  - 0.0625
  - 0.0625
  - 0.125
  wyckoff: c
  site_symmetry: -43m
  multiplicity: 64
  coordination_distances:
    Mg:
    - 1.29
    - 1.97
    - 1.97
    O:
    - 1.29
    - 1.97
    - 1.97
  cutoff: 2.37
  method: manual
```

When we try to add the site that is very close to the constituent atoms or other interstitial sites,
you will get the warning message as 
```
2019-08-31 17:16:08,029 WARNING pydefect.util.structure_tools Inserted position is too close to X0+.
  The distance is 0.210 A.
```
where X0+ means another interstitial site, and the site is not added.
If you want to add the cite anyway, use the `--force_add` option.

Once we generate the interstitial.yaml, we can specify particular interstitial sites as follows.
```
Interstitials: i1
```
By default, `all` is set, meaning all the interstitial sites are considered.

Or we can type the `is` sub-command again as follows.
```
python ~/my_bin/pydefect/pydefect/main.py is --interstitial_sites i1 --dopants Na
```

### 7. Definition of complex defects
Sometimes, one want to treat complex defects.
For instance, in MgO<sub>2</sub>, O<sub>2</sub> molecules act as anions.
In such a case, it is possible that O<sub>2</sub> molecules make a vacancy.
Another important example is the methylammonium lead halides(MAPI), where methylammonium ions acts as singly positive cations (CH3NH3+).

In `pydefect`, we can define complex defects. 
Let's consider the Mg-O pair in MgO.
In the former process, the `DPOSCAR` composed of 64 atoms is already generated.
Now, we consider Mg at (0, 0, 0) (index: 0) and O at (0.25, 0, 0) (index: 63).
By typing
```
python ~/my_bin/pydefect/pydefect/main.py cd -r 0 63 --name divacancy --extreme_charge_state 0
```
we obtain the `complex_defects.yaml`, which shows,
```
MgO-pair:
  removed_atom_indices:
  - 0
  - 63
  inserted_atoms: []
  point_group: 4mm
  multiplicity: 192
  extreme_charge_state: 0
  annotation: null
```
For defect calculations, we need to set cluster name and extreme_charge_state,
the latter means minus of the net charge state; now Mg-O molecule has neutral charge state, so

Then, modify `defect.in` file as follows.
```
Complex defects: divacancy
```

### 8. Creation of defect calculation directories
We next create directories for point-defect calculations by the `defect_vasp_set` (=`dvs`) sub-command like
```
python ~/my_bin/pydefect/pydefect/main.py dvs
```

With this command, a lot of directories are created, including `perfect`.

If you want to calculate only oxygen vacancies, you can restrict the calculated defects with `-kw` option and a python regular expression,
```
python ~/my_bin/pydefect/pydefect/main.py dvos -kw "Va_O[0-9]?_[0-9]+"
```
, which create these directories.
```
perfect/ Va_O1_0/ Va_O1_1/ Va_O1_2/
```

If you again type the same command, the following information is shown,
```
2019-07-09 17:22:21,078 WARNING pydefect.input_maker.defect_entry_set_maker    perfect already exists, so nothing is done.
2019-07-09 17:22:21,399 WARNING pydefect.input_maker.defect_entry_set_maker    Va_O1_0 already exists, so nothing is done.
2019-07-09 17:22:21,744 WARNING pydefect.input_maker.defect_entry_set_maker    Va_O1_1 already exists, so nothing is done.
2019-07-09 17:22:22,085 WARNING pydefect.input_maker.defect_entry_set_maker    Va_O1_2 already exists, so nothing is done.
```
and no directories are newly created. 
This is a fail-safe treatment so as not to delete the calculated directories by mistake.
If you really want to overwrite the directories, you can use the `--force_overwrite` option.

In each directory, we can find the `defect_entry.json` file, containing information about a point defect obtained before the first-principles calculations.
To see summary of `defect_entry.json`, type
```
python ~/my_bin/pydefect/pydefect/main.py de --print
```

When you'd like to add some particular defects, you can use
```
python ~/my_bin/pydefect/pydefect/main.py dvs -d Va_O1_-1
```
With this command, `Va_O1_-1/` is created.

### 9. Generation of defect_entry.json

We often want to calculate complex defects, peculiar defects such as DX centers, defects with different initial structures, constructed by hand.
Or, researchers already finished the defect calculations, but want to use `pydefect` for the post-processing.
For these purposes, `pydefect` generate `defect_entry.json` by parsing the `POSCAR` and `INCAR` files for the defects.

When `defect_entry.json` is generated, the directory name is parsed.
If one wants to calculate the same defect but with different atomic structure, we can use the `annotation`.
The directory name is parsed as follows.
```
 AA_BB_CC_2_XX_YY_ZZ/ -> name='AA_BB_CC', charge=2, annotation='XX_YY_ZZ'
```
For example, 
```
             Va_Mg1_2/ -> name = "Va_Mg1",       charge =  2, annotation = None
      Va_O1_-2_inward/ -> name = "Va_O1",        charge = -2, annotation = "inward"
Mg_i+Va_O1*2_2_coord1/ -> name = "Mg_i+Va_O1*2", charge =  2, annotation = "coord1"
```

Therefore, one needs to create the directory following this rule and then, type, 
```
python ~/my_bin/pydefect/pydefect/main.py de --make_defect_entry
```
to generate `defect_entry.json`.

When one want to generate the `vasp` input files, type, 
```
python ~/my_bin/vise/vise/main.py vs -t defect --charge -1
```
where the charge is assumed to be -1.

### 10. Parsing supercell calculation results
Then, let's run the vasp calculations.
<p> We recommend the users to use &Gamma; version of vasp if the k-point sampling is only &Gamma; point for very large supercells.</p>

After (partly) finishing the vasp calculations, we generate the `dft_results.json` 
that contains the first-principles calculation results related to the defect properties.

By using the `supercell_results` (=`sr`) sub-command like,
```
python ~/my_bin/pydefect/pydefect/main.py sr --dir_all
```
you can generate `dft_results.json` in all the directories.
When you want to generate `dft_results.json` for some particular directories, *e.g.*, Va_O1_0, type
```
python ~/my_bin/pydefect/pydefect/main.py sr --dirs Va_O1_0
```

Here, the name of `perfect/` has special meaning, so users **must** use `perfect/` for the supercells without defects.

### 11. Corrections of defect formation energies in finite-size supercells 
When the supercell method is adopted, the total energies for **charged defects** are not properly estimated due to interaction between a defect, its images, and background charge. 
Therefore, we need to correct the total energies of the charged defect supercells to those in the dilution limit.

The corrections are attained using the `extended_fnv_correction` (=`efc`) sub-command,
```
python ~/my_bin/pydefect/pydefect/main.py efc --unitcell_json ../unitcell/unitcell.json --perfect_json perfect/dft_results.json
```

For the corrections, we need the dielectric constants and atomic site potentials in the perfect supercell.
Therefore, the paths to `unitcell.json` and `dft_results.json` of `perfect` must be assigned.
Bear also in mind that this command takes some time, so we recommend the users to prepare coffee or go on a walk outside during this process.

The correction method adopted in `pydefect` at this moment is the so-called extended Freysoldt-Neugebauer-Van de Walle (eFNV) method.
so if one uses the corrections, please cite the following papers.
- [Y. Kumagai*, and F. Oba, Electrostatics-based finite-size corrections for first-principles point defect calculations, Phys. Rev. B, 89 195205 (2014).](https://journals.aps.org/prb/abstract/10.1103/PhysRevB.89.195205)
- [C. Freysoldt, J. Neugebauer, C. Van de Walle, Fully Ab Initio Finite-Size Corrections for Charged-Defect Supercell Calculations, Phys. Rev. Lett., 102 016402 (2009).](https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.102.016402)

You obtain `potential.eps` file, which contains information about defect-induced and point-charge potential, 
and their differences at each atomic site as shown below.

The width and height of the horizontal line indicate the averaged region and ∆VPC, q/b|far, respectively. 
When performing the corrections, I strongly recommend you to check all the `potential.eps` files for your calculated defects so as to reduce careless mistakes as much as possible.

### 12. Gathering defect related information
Then, we need to generate `defect.json` files in all the defect directories.
For this purpose, type,
```
python ~/my_bin/pydefect/pydefect/main.py d 
```

Some calculations might not be finished properly or still ongoing.
To see whether the calculations are properly finished, one can use the `diagnose` (=`d`) option
```
python ~/my_bin/pydefect/pydefect/main.py d -d
```
which shows like
```
  Va_Ba1_-1/  convergence : F    band edge : UP  :    No in-gap state  DOWN  :       Acceptor PHS
  Va_Ba1_-2/  convergence : T    band edge : UP  :    No in-gap state  DOWN  :    No in-gap state
   Va_Ba1_0/  No supercell results file.
    Va_O1_0/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
    Va_O1_1/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
    Va_O1_2/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
  Va_Sn1_-1/  convergence : T    band edge : UP  :    No in-gap state  DOWN  :    Localized state
  Va_Sn1_-2/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
  Va_Sn1_-3/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
  Va_Sn1_-4/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
   Va_Sn1_0/  convergence : T    band edge : UP  :    No in-gap state  DOWN  :    Localized state
```
If the convergences at the electronic and/or ionic steps are not attained, convergence is shown as `F`.
Further, we can see the band edge information at the spin up (UP) and down (DOWN) channels, which will be explained later.

### 13. Check defect eigenvalues
Generally, point defects are divided into three types.

(1) Defects with deep localized states inside the band gap. 
This type of defect is generally considered to be detrimental for device performances as the carriers are trapped by the localized states.
Furthermore, they could act as color centers, as represented by vacancies in NaCl.
Therefore, it is important to know the position of the localized state and its origin.

(2) Defects without any defect states inside the band gap, which would not affect the electronic properties as long as their concentrations are sufficiently low.

(3) Defects with hydrogenic carrier states, or perturbed host states (PHS), where carriers locate at the band edges with loosely trapped by the defects.
An examples are the B-on-Si (p-type) and P-on-Si (n-type) substitutional dopants in Si.
This type of defect also does little harm for device performances, but introduce the carrier electrons or holes or compensate other charged defects.
The wavefunctions of the PHS widespread to several million atoms, so to estimate their thermodynamical transition levels, we need to calculate such supergiant supercells.  
Instead, we usually avoid calculating these quantities and describe `the defects have PHS and their transition energies locate near band edges` only qualitatively.
See, for examples.
- [Y. Kumagai*, M. Choi, Y. Nose, and F. Oba, First-principles study of point defects in chalcopyrite ZnSnP2, Phys. Rev. B, 90 125202 (2014).](https://link.aps.org/pdf/10.1103/PhysRevB.90.125202)
- [Y. Kumagai*, L. A. Burton, A. Walsh, and F. Oba, Electronic structure and defect physics of tin sulfides: SnS, Sn2S3, and SnS2, Phys. Rev. Applied, 6 014009 (2016).](https://link.aps.org/doi/10.1103/PhysRevApplied.6.014009)
- [Y. Kumagai*, K. Harada, H. Akamatsu, K. Matsuzaki, and F. Oba, Carrier-Induced Band-Gap Variation and Point Defects in Zn3N2 from First Principles, Phys. Rev. Applied, 8 014015 (2017).](https://journals.aps.org/prapplied/abstract/10.1103/PhysRevApplied.8.014015)
- [Y. Kumagai*, N. Tsunoda, and F. Oba, Point defects and p-type doping in ScN from first principles, Phys. Rev. Applied, 9 034019 (2018).](https://journals.aps.org/prapplied/abstract/10.1103/PhysRevApplied.9.034019)
- [N. Tsunoda, Y. Kumagai*, A. Takahashi, and F. Oba, Electrically benign defect behavior in ZnSnN2 revealed from first principles, Phys. Rev. Applied, 10 011001 (2018).](https://journals.aps.org/prapplied/abstract/10.1103/PhysRevApplied.10.011001)

Therefore, it is important to see the defect levels and judge if the carriers create the PHS or defect localized states.
pydefect show the calculated eigenvalues and the band-edge states by the `eigenvalues` (=`eig`) sub-command
```
python ~/my_bin/pydefect/pydefect/main.py eig --defect_dir . --unitcell ../../unitcell/unitcell.json --perfect ../perfect/dft_results.json -s eig.png
```
or using the diagnose sub-command as shown above.

The given `eig.png` looks like
![V<sub>Mg</sub><sup>-2</sup>](eig1.png)
![V<sub>Mg</sub><sup>0</sup>](eig2.png)
![Mg<sub>i</sub><sup>0</sup>](eig3.png)

These are examples of V<sub>Mg</sub><sup>-2</sup> and V<sub>Mg</sub><sup>0</sup> in MgSe.
Here, one can see occupations of single-particle levels in the spin-up and -down channels.
The x-axis and y-axis are fractional coordinates of sampled k points and single-particle energy in the absolute scale, respectively.
Filled circles inside the figures are eigenenergies in the defect supercells.
There are also five lines, namely VBM and CBM in the unitcell (**blue**), those in the perfect supercell (**red**), and the Fermi level in the defect supercells.
The numbers in the figure indicate the band indices, which are shown discretely.

The filled circles are categorized into blue, green, and orange ones 
which mean the occupied, partially occupied (from 0.1 to 0.9), and unoccupied eigenstates in the defect supercell, respectively. 

We emphasize that the automatically determined band-edge states could be incorrect as it is difficult to determine them.
Therefore, please carefully check the band-edge states, and draw the band-decomposed charge density states if the band-edge states are not so obvious.

If you find automatically determined band-edge states are incorrect, you can modify them by
```
python ~/my_bin/pydefect/pydefect/main.py sr -be up acceptor_phs --dirs .
```
and
```
python ~/my_bin/pydefect/pydefect/main.py sr -be down acceptor_phs --dirs .
```
for both spin-up and -down states.
There are four supported states `donor_phs`, `acceptor_phs`, `localized_state`, `no_in_gap`, the former two are considered as shallow states, and omitted for energy plot by default.


### 14. Plot defect formation energies
Here, we show how to plot the defect formation energies.

The plot of the defect formation energies requires a wide variety of information, namely
band edges, chemical potentials of competing phases, total energy of perfect supercell.

Here, we plot the defect formation energies as a function of the Fermi level with the `plot_energy` (=`pe`) sub-command
```
python ~/my_bin/pydefect/pydefect/main.py pe --unitcell ../unitcell/unitcell.json --perfect perfect/dft_results.json --defect_dirs Va*_* --chem_pot_yaml ../competing_phases/vertices_*.yaml -x -1 8 -s energy_A.pdf
```
which shows like,
![](energy.pdf)

This command
Once the calculation directories are parsed, `defect_energies.json` is automatically generated.
If one wants to regenerate the results, one needs to remove it.

When changing the condition for chemical potential, namely the position of the vertex in
the chemical potential diagram, please use the `--chem_pot_label` option.

There are many options for this sub-command.
For instance, if one wants to restrict the plot only for the nitrogen vacancies, one 
can use `--filtering` option like,
```
python ~/my_bin/pydefect/pydefect/main.py pe --unitcell ../unitcell/unitcell.json --perfect perfect/dft_results.json --defect_dirs Va*_* --chem_pot_yaml ../competing_phases/vertices_*.yaml -x -1 8 -s energy_A.pdf
```

### 15. Show local structure information
We also regularly check the local structures around defects as they show various information.
`pydefect` can show the local structure information by text using the following command.
```
python ~/my_bin/pydefect/pydefect/main.py ls
```
which shows e.g.,
```
2020-01-27 12:28:22,556 INFO pydefect.main_functions parsing directory Va_Mg1_-1/...
--------------------------------------------------------------------------------
Is defect center atomic position?: False
Defect center position: [0.5, 0.0, 0.0]
Site symmetry: 1 <- m-3m
    element  final <-initial   disp
index name   dist(A)  dist(A)  dist   coordination (final) <- coordination (initial)
  45     O    2.25 <-  2.12    0.12    0.00   0.00   2.25  <-   0.00   0.00   2.12
  53     O    2.25 <-  2.12    0.13    0.00   2.25   0.00  <-   0.00   2.12   0.00
  58     O    2.25 <-  2.12    0.12    0.00   0.00  -2.25  <-   0.00   0.00  -2.12
  60     O    2.24 <-  2.12    0.12    0.00  -2.24  -0.00  <-   0.00  -2.12   0.00
  61     O    2.25 <-  2.12    0.13    2.25   0.00   0.00  <-   2.12   0.00   0.00
  62     O    2.24 <-  2.12    0.12   -2.24   0.01  -0.00  <-  -2.12   0.00   0.00

...
```
where the defect position is assumed to locate at the original atomic site. 
When `--cs` option is added, the grouped results are shown at the bottom as follows,
```
{'Va_Mg1': [[-1, -2, 0]], 'Va_O1': [[0], [1], [2]]}
```
In this case, the Mg vacancies in three charge states have the same structure, indicating two of them are shallow states.


### 16. Calculate the carrier and defect concentrations 
We can also calculate the carrier and defect concentrations using the defect formation energies using `pydefect`.
For the calculations, `unitcell.json` and `defect_energies.json` are needed.
When one wants to calculate the equilibrium carrier and defect concentrations at 1000K, use the `concentrations` (=`c`) sub-command as follows:
```
 python ~/my_bin/pydefect/pydefect/main.py c --unitcell ../unitcell/unitcell.json -t 1000
```
which shows
```
++ Equilibrium concentration
Temperature: 1000.0 K.
Fermi level from vbm: 1.98 eV.
            p: 9.3e+10 cm-3.
            n: 2.0e+16 cm-3.
        p - n: -2.0e+16 cm-3.
---
      Mg_i1_2: 1.0e+16 cm-3.
---
     Se_i1_-2: 1.4e+02 cm-3.
---
    Va_Mg1_-1: 3.7e+04 cm-3.
    Va_Mg1_-2: 8.9e+07 cm-3.
     Va_Mg1_0: 2.4e-03 cm-3.
---
     Va_Se1_0: 3.4e+16 cm-3.
     Va_Se1_1: 2.8e+12 cm-3.
     Va_Se1_2: 1.8e+10 cm-3.

++ Quenched equilibrium concentration
Temperature: 298 K.
Fermi level from vbm: 2.38 eV.
            p: 0.0e+00 cm-3.
            n: 2.0e+16 cm-3.
        p - n: -2.0e+16 cm-3.
---
      Mg_i1_2: 1.0e+16 cm-3.
---
     Se_i1_-2: 1.4e+02 cm-3.
---
    Va_Mg1_-1: 1.2e-11 cm-3.
    Va_Mg1_-2: 8.9e+07 cm-3.
     Va_Mg1_0: 5.9e-43 cm-3.
---
     Va_Se1_0: 3.4e+16 cm-3.
     Va_Se1_1: 2.0e-05 cm-3.
     Va_Se1_2: 6.9e-19 cm-3.
```

Since these concentrations are calculated in a selfconsistent (SC) manner, the calculations sometimes do not converge.
In such case, we can check the selfconsistent iterations using the `verbose` (=`v`) option. 

 
    
