import unittest
import filecmp
from defect_in import *

__author__ = "Yu Kumagai"
__copyright__ = "Copyright 2017, Oba group"
__version__ = "0.1"
__maintainer__ = "Yu Kumagai"
__email__ = "yuuukuma@gmail.com"
__status__ = "Development"
__date__ = "December 4, 2017"

FILENAME_TO_JSON_FILE = "examples/defect_setting_test.json"
FILENAME_DPOSCAR = "examples/POSCAR-MgO64atoms"
FILENAME_FROM_DEFECT_IN = "examples/defect.in.example"
FILENAME_TO_DEFECT_IN = "examples/defect.in.to_example"

class DefectSettingTest(unittest.TestCase):

    def setUp(self):
        """The following condition can be generated by typing
        python3 defect_in.py - p POSCAR - MgO64atoms - d Al N - -included \
            Va_O1_ - 1 Va_O1_ - 2 - -excluded Va_O1_1 Va_O1_2 - -distance \
            0.15 - -symprec 0.001 - -cutoff 2.0 - e 4 - i 0.1 0.1 0.1
        """

        structure = Structure.from_file(FILENAME_DPOSCAR)
        Mg1 = IrreducibleSite(irreducible_name="Mg1", element="Mg",
                              first_index=1, last_index=32,
                              repr_coords=[0, 0, 0])
        O1 = IrreducibleSite(irreducible_name="O1", element="O",
                             first_index=33, last_index=64,
                             repr_coords=[0.25, 0.25, 0.25])
        irrep_elements = [Mg1, O1] 
        dopant_configs = [["Al", "Mg"], ["Al", "O"], ["N", "Mg"], ["N", "O"]]
        antisite_configs = [["Mg", "O"], ["O","Mg"]]
        interstitial_coords = [[0.1, 0.1, 0.1]]
        included = ["Va_O1_-1", "Va_O1_-2"]
        excluded = ["Va_O1_1", "Va_O1_2"]
        distance = 0.15
        cutoff = 2.0
        symprec = 0.001
        oxidation_states = {"Mg": 2, "O": -2, "Al": 3, "N": -3}
        electronegativity = {"Mg": 1.31, "O": 3.44, "Al": 1.61, "N": 3.04}

        self._mgo = DefectSetting(structure, irrep_elements, dopant_configs,
                antisite_configs, interstitial_coords, included, excluded, 
                distance, cutoff, symprec, oxidation_states, electronegativity)

    def test_dict(self):
        self._dict = self._mgo.as_dict()
        self.object_from_dict = DefectSetting.from_dict(self._dict)
        # Although irreducible_sites return pointers, __eq__ is modified in
        # defect_in.py. So, no problem for comparison.
        self.assertTrue(vars(self.object_from_dict)) == vars(self._mgo)

    def test_to_json_file(self):
        self._mgo.to_json_file(FILENAME_TO_JSON_FILE)
        jf = DefectSetting.json_load(FILENAME_TO_JSON_FILE)
        self.assertTrue(vars(self._mgo) == vars(jf))

    def test_from_defect_in(self):
        self._mgo_from_defect_in = \
            DefectSetting.from_defect_in(poscar=FILENAME_DPOSCAR,
                                         defect_in_file=FILENAME_FROM_DEFECT_IN)
        self.assertTrue(vars(self._mgo_from_defect_in)) == vars(self._mgo)

    def test_from_basic_settings(self):
        self._mgo_from_basic_settings = \
            DefectSetting.from_basic_settings(
                poscar=FILENAME_DPOSCAR,
                dopants=["Al", "N"],
                interstitial_coords=[0.1, 0.1, 0.1],
                is_antisite=True,
                en_diff=4.0,
                included=["Va_O1_-1", "Va_O1_-2"],
                excluded=["Va_O1_1", "Va_O1_2"],
                distance=0.15,
                cutoff=2.0,
                symprec=0.001)
        self.assertTrue(vars(self._mgo_from_basic_settings)) == vars(self._mgo)

    def test_make_defect_name_set(self):
        print(self._mgo.make_defect_name_set())

# Look the same files but return Failure.
#    def test_to(self):
#        self._mgo.to(defectin_file=FILENAME_TO_DEFECT_IN,
#                     poscar_file=FILENAME_DPOSCAR)
#        self.assertTrue(
#                    filecmp.cmp(FILENAME_TO_DEFECT_IN, FILENAME_FROM_DEFECT_IN))


