# Tutorial of pydefect
-----------------------

We here illustrate how to use the PyDefect code.

**Note1: Units used in PyDefect are eV for energy and <span>&#8491;</span> for length following the vasp convention.**

**Note2: Only nonmagnetic host materials are allowed.**

Usually, point-defect calculations in non-metallic solids are intricate as shown in the workflow below;
some tasks can be performed concurrently, while others must follow some other tasks.

![](flowchart.png)

Here, we suppose the following directory tree.
The `<project_name>` is usually the name of material or that with crystal structure, e.g., rutile-TiO<sub>2</sub>.
```
<project_name>
 │
 ├ unitcell/ ── structure_opt/
 │            ├ band/
 │            └ dos/
 │            
 ├ competing_phases/ ── <competing_phase 1>
 │                    ├── <competing_phase 2>
 │                    ....
 │  
 └ defects/ ── perfect/  
              ├─ Va_X_0/
              ├─ Va_X_1/
              ├─ Va_X_2/
             ...
```
We recommend the users to follow the same directory structure as this tutorial assumes it. 
Details of the process are examined step by step.

### 1. Relaxation of unit cell

Point defect calculations are generally performed at a fully relaxed structures by the given functional and PAW potentials 
to avoid the artificial strain and stress which is responsible for the unwanted supercell size dependence. 
Therefore, one begins with optimizing lattice constants and fractional coordinates of atomic positions in the unitcell. 

We first prepare the POSCAR file of the pristine bulk unitcell, 
and create `unitcell/` directory and `unitcell/structure_opt/` subdirectory and move there. 
In this tutorial, `/` means a directory at any time.
PyDefect can construct the vasp input files namely INCAR, POTCAR, KPOINTS files, for various tasks and exchange-correlation (XC) functional with simple command line tools.
For instance, vasp input files to optimize unitcell using the PBEsol functional are generated by the following command.
```
python $PATH_TO_PYDEFECT/pydefect/main.py vasp_oba_set -t structure_opt -x pbesol
```
where `vasp_oba_set`, or its abbreviation (`vos`) , is a sub-command option.
In PyDefect, all the sub-commands have their own abbreviated sub-commands.
When PyDefect creates vasp input files, analyze or visualize vasp output files, 
the `VaspObaSet` library, written by Kumagai largely on the basis of [pymatgen](http://pymatgen.org) mostly developed by Materials Project team, is used.

Therefore, as shown [pymatgen web page 1](https://pymatgen.org/usage.html) or [2](https://pymatgen.org/_modules/pymatgen/io/vasp/inputs.html), 
we need to set the PMG_DEFAULT_FUNCTIONAL and PMG_VASP_PSP_DIR at the .pmgrc.yaml file at the home directory, e.g.,
```
PMG_DEFAULT_FUNCTIONAL: PBE_54
PMG_MAPI_KEY: xxxxxxxxxxxxxxxx
PMG_VASP_PSP_DIR: /home/kumagai/potcars/
```
PMG_MAPI_KEY needs to be set as well for querying POSCARs of competing materials as shown later.
In `VaspObaSet`, we provide the default potcar set regularly we use.
CHANGE THE PROGRAM TO ALLOW USER POTCAR AND MODIFY THIS TUTORIAL.

There are many options for each sub-command, so please refer its help by e.g.,
```
python ~/my_bin/pydefect/pydefect/main.py vos -h
```
for details.

Note that the structure optimization must be generally iterated with 1.3 times larger cutoff energy 
until the forces and stresses converge at the first ionic step so as to reduce the errors caused by the Pulay Stress to an acceptable accuracy.
See [vasp manual](https://cms.mpi.univie.ac.at/vasp/vasp/Volume_vs_energy_volume_relaxations_Pulay_Stress.html) or [wikipedia](https://cms.mpi.univie.ac.at/vasp/vasp/Volume_vs_energy_volume_relaxations_Pulay_Stress.html) for details.
Note that such iteration of the vasp calculations is not supported by PyDefect, but one can easily write the simple runshell scripts to do so.

### 2. Calculation of band, DOS, and dielectric tensor

We then calculate the band structure (BS), density of states (DOS), and dielectric constant.
In the defect calculations, the BS and DOS are used for determining the valence band maximum (VBM) and conduction band minimum (CBM), 
while the dielectric constant, a sum of electronic and ionic dielectric tensors, is needed for correcting the defect formation energies and eigenvalues of defect-induced deep states.

First, we create `band/`, `dos/` and `dielectric/` in `unitcell/` and copy POSCAR from `unitcell/structure_opt` and type the following command in each directory,
```
python ~/my_bin/pydefect/pydefect/main.py vos -t band -x pbesol
```
```
python ~/my_bin/pydefect/pydefect/main.py vos -t dos -x pbesol
```
```
python ~/my_bin/pydefect/pydefect/main.py vos -t dielectric -x pbesol
```
and run the vasp calculations.

Here, the band path is determined based upon the [seekpath code](https://www.materialscloud.org/work/tools/seekpath), 
so if one uses the plot for publication or presentation, please cite the following paper.
- [Y. Hinuma, G. Pizzi, Y. Kumagai, F. Oba, I. Tanaka, Band structure diagram paths based on crystallography, Comp. Mat. Sci. 128, 140 (2017).](https://www.sciencedirect.com/science/article/pii/S0927025616305110?via%3Dihub) 
  DOI: 10.1016/j.commatsci.2016.10.015 (the "HPKOT" paper; arXiv version: arXiv:1602.06402).

PyDefect also provides the plotters of BS and DOS based on `VaspObaSet` with `plot_band` (=`pb`) and `plot_dos` (=`pd`) sub-commands.
Type the following commands in `band/` and  `dos/`, respectively. 
```
python ~/my_bin/phos_pbesol/obadb/obadb/analyzer/main.py pb -v vasprun.xml -k KPOINTS -f band.pdf
```
```
python ~/my_bin/phos_pbesol/obadb/obadb/analyzer/main.py pd -v vasprun.xml -f dos.pdf
```

### 3. Gathering unitcell information related to point-defect calculations

We next collect the bulk information relevant to point-defect calculations, namely band edges (for defect-formation energies), 
electronic and ionic contributions to dielectric tensor (for corrections), unitcell volume, and unitcell DOS (both for carrier and defect concentrations),
using the `unitcell_results` (=`ur`) sub-command.
```
python ~/my_bin/pydefect/pydefect/main.py ur --static_diele_dir dielectric --ionic_diele_dir dielectric --band_edge_dir band --volume_dir dielectric --total_dos_dir dos --json_file unitcell.json -o OUTCAR-finish -p POSCAR-finish -v vasprun.xml
```
In this command, we suppose that OUTCAR and CONTCAR are renamed to OUTCAR-finish and POSCAR-finish, respectively, as an example,
and specify these files using `-o` and `-p` options.
With this command, `unitcell.json` is generated, which will be used for the analysis later.
Generally, json files are less readable for human beings, so we implement `print` option to generate readable output from json files, like
```
python ~/my_bin/pydefect/pydefect/main.py ur --print
```
Here, we show an example of the unitcell information.
```
vbm (eV): 3.4103
cbm (eV): 4.4278
static dielectric tensor:
[[ 4.680097 -0.       -0.      ]
 [-0.        4.680097  0.      ]
 [ 0.       -0.        4.680097]]
ionic dielectric tensor:
[[14.953044 -0.        0.      ]
 [-0.       14.953065 -0.      ]
 [ 0.       -0.       14.953038]]
total dielectric tensor:
[[19.633141000000002, -0.0, 0.0], [-0.0, 19.633162, 0.0], [0.0, -0.0, 19.633135]]
volume (A^3): 68.98647886527607
Total DOS: Exists
```
Since the total dos is so long, we show only whether it is set or not. 

### 4. Calculation of competing phases
When a defect is introduced, atoms are exchanged with the hypothetical atomic reservoirs within the thermodynamics framework.
In order to calculate a free energy of defect formation that is approximated with the defect formation energy in most cases,
we need to set chemical potentials of exchanged atoms accompanied with creating defects.
Usually, we consider the chemical potentials at the condition where competing phases coexist with the host material,
which are determined from the chemical potential diagram.

First, we create directories in `competing_phases/` for competing phases including VASP input sets in each directory.
Using the `chempotdiag` library developed and managed by Akira Takahashi, 
we can retrieve POSCARs of the stable or slightly unstable competing phases from [the Materials Project (MP)](https://materialsproject.org).
For this purpose, one needs [the API keys](https://materialsproject.org/open) of the MP as mentioned above.
Here, as an example, we obtain the competing materials with BaSnO of which energy above hull is less than 0.5 meV/atom using 
```
python ~/my_bin/phos_pbesol/obadb/obadb/analyzer/chempotdiag/main.py cpd -m -el Ba Sn O -ch 0.05
```
Particular molecules, namely O<sub>2</sub>, N<sub>2</sub>, F<sub>2</sub>, H<sub>2</sub>O, N<sub>2</sub>, NH<sub>3</sub>, NO<sub>2</sub>, P<sub>2</sub>, and P<sub>4</sub>, 
are not retrieved from MP but created by `chempotdiag` itself since these molecules have been calculated as solids in MP.

The bulk structure, namely BaSnO<sub>3</sub> in this example, has already been calculated, so we do not have to iterate the same calculations.
Therefore, we simply remove `Ba1Sn1O3_mp-3163` and make a symbolic link by `ln -s ../unitcell/structure_opt BaSnO3`.

We then generate `INCAR`, `POTCAR`, `KPOINTS` files for other competing solids or molecules.
In order to compare the total energies, we need to use the same cutoff energy, `ENCUT`, increased to 1.3 times of max `ENMAX` between the constituent POTCARs.
In case of BaSnO<sub>3</sub>, `ENMAX` of Ba, Sn, and O are 187.181, 103.236, 400.0, so we need to set `ENCUT = 520`, using the `vasp_oba_set` sub-command
```
python ~/my_bin/pydefect/pydefect/main.py vos -t structure_opt -x pbesol -is ENCUT 520 --dirs *_*/
```

<p>Note, if competing phases are gases, we need to change `ISIF` to 2 so as not to relax the lattice constants (see [vasp manual](https://cms.mpi.univie.ac.at/wiki/index.php/ISIF)), 
and `KPOINTS` requires only the &Gamma; point sampling.</p>
In such case, type as follows,
```
python ~/my_bin/pydefect/pydefect/main.py vos -t structure_opt -x pbesol -is ENCUT 520 ISIF 2 -kw is_cluster True --dirs O2molecule_pydefect
```
where O2molecule_pydefect is a directory for the O2 molecule model. 

After finishing the vasp calculations, we generate the chemical potential diagram with
```
python ~/my_bin/phos_pbesol/obadb/obadb/analyzer/chempotdiag/main.py cpd -v */ -p POSCAR-finish -o OUTCAR-finish -c BaSnO3 -y -s cpd_BaSnO3.pdf
```
Note that for gas phases there are some parameters of the partial pressure and temperature to determine the chemical potentials (read help for more details).
With this command, we depict the Ba-Sn-O chemical potential diagram saved as `cpd_BaSnO3.pdf` which looks like

![](cpd_BaSnO3.png)

Values at the vertices at the BaSnO<sub>3</sub> region written in `vertices_BaSnO3.yaml` as shown
```
A: {Ba: -6.339048510000005, O: -0.18899787319844918, Sn: -5.638818995000001}
B: {Ba: -5.9688971474999875, O: -0.22601300944845448, Sn: -5.897924948750013}
C: {Ba: -5.257239969999993, O: -0.5818415981984444, Sn: -5.542096360000016}
D: {Ba: -2.4861917899999817, O: -3.3528897781984526, Sn: 3.552713678800501e-15}
E: {Ba: -3.2221928749999975, O: -3.1075560831984568, Sn: 3.552713678800501e-15}
F: {Ba: -3.6187877250000113, O: -2.9092586581984463, Sn: -0.19829742500001046}
compound: BaSnO3
pressure: null
standard_energy: {Ba: -2.141765, O: -4.872655801801549, Sn: -4.1937075}
temperature: 0
```
Here, `standard_energy` are the energies of the most stable simple substances or simple gas phases, 
and A--F show the relative chemical potentials at the vertices shown in `cpd_BaSnO3.pdf`. 

### 5. Selection of a supercell
So far, we have finished the calculations of the unit cell and competing phases, and are eventually ready for point-defect calculations. 
Let's create `defect/` directory and copy unitcell `POSCAR` file from *e.g.* `unitcell/dos/` to `defect/`

Firstly, we need to determine the shape and size of the supercell.
PyDefect recommends a nearly isotropic supercell composed of moderate number of atoms.
For this purpose, use the `recommend_supercell` (=`rs`) sub-command,
```
python ~/my_bin/pydefect/pydefect/main.py rs
```
Then, `UPOSCAR` and `SPOSCAR` that are the POSCARs for the unitcell and supercell, respectively, are generated.

Although PyDefect constructs `SPOSCAR` based on the *conventional* unitcell by default, 
it can also expand the *primitive* unitcell with `-pr` option.
(If centering is absent, these two are the same.)

It is also possible to change the lattice angle of the supercell from those of the conventional or primitive unitcell,
but not a good idea for point-defect calculations.
<p> For example, &Gamma;, we can make a supercell in which a-, b-, and c-axes are mutually orthogonal.</p>
However, its lattice breaks the original hexagonal symmetry, which reduces the accuracy of the point-defect calculations.


### 6. Construction of defect initial setting
We then create the initial setting file for point defects with the `initial_setting` (=`is`) sub-command.
```
python ~/my_bin/pydefect/pydefect/main.py is
```
With this command, we can build the `defect.in` file, which contains the full information on what kind of defects are to be generated automatically.
At the same time, `DPOSCAR`, POSCAR used for the defect calculations, is created. 
If one follows this tutorial, `DPOSCAR` should be the same as `SPOSCAR`, while if one prepares their own supercell `POSCAR`, an order of elements may be changed.

An example of `defect.in` looks as follows:
```
  Space group: Pm-3m

Transformation matrix:  3  3  3
Cell multiplicity: 27

   Irreducible element: Ba1
        Wyckoff letter: a
         Site symmetry: m-3m
          Coordination: O2-: 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 
      Equivalent atoms: 1..27
Fractional coordinates: 0.1666670  0.1666670  0.1666670
     Electronegativity: 0.89
       Oxidation state: 2

   Irreducible element: Sn1
        Wyckoff letter: b
         Site symmetry: m-3m
          Coordination: O2-: 2.05 2.05 2.05 2.05 2.05 2.05 
      Equivalent atoms: 28..54
Fractional coordinates: 0.0000000  0.0000000  0.0000000
     Electronegativity: 1.96
       Oxidation state: 4
       
   Irreducible element: O1
        Wyckoff letter: c
         Site symmetry: 4/mmm
          Coordination: Ba2+: 2.9 2.9 2.9 2.9 Sn4+: 2.05 2.05 O2-: 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 
      Equivalent atoms: 55..135
Fractional coordinates: 0.0000000  0.1666670  0.0000000
     Electronegativity: 3.44
       Oxidation state: -2

Interstitials: 
Antisite defects: 

Substituted defects: 

Maximum Displacement: 0.2

Exceptionally included: 
Exceptionally excluded: 

Cutoff region of atoms perturbed: 3.0
Symprec: 0.01
Angle tolerance: 5
```

If we want to add dopants *a posteriori*, we can type as follows.
```
python ~/my_bin/pydefect/pydefect/main.py is --print_dopant Na
```

This example of Na dopant prints 
```
   Dopant element: Na
Electronegativity: 0.93
  Oxidation state: 1
```

By inserting this with an editor to `defect.in` and modify `Substituted defects` as follows
```
  Space group: Pm-3m

Transformation matrix:  3  3  3
Cell multiplicity: 27

   Irreducible element: Ba1
        Wyckoff letter: a
         Site symmetry: m-3m
          Coordination: O2-: 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 
      Equivalent atoms: 1..27
Fractional coordinates: 0.1666670  0.1666670  0.1666670
     Electronegativity: 0.89
       Oxidation state: 2

   Irreducible element: Sn1
        Wyckoff letter: b
         Site symmetry: m-3m
          Coordination: O2-: 2.05 2.05 2.05 2.05 2.05 2.05 
      Equivalent atoms: 28..54
Fractional coordinates: 0.0000000  0.0000000  0.0000000
     Electronegativity: 1.96
       Oxidation state: 4

   Irreducible element: O1
        Wyckoff letter: c
         Site symmetry: 4/mmm
          Coordination: Ba2+: 2.9 2.9 2.9 2.9 Sn4+: 2.05 2.05 O2-: 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 
      Equivalent atoms: 55..135
Fractional coordinates: 0.0000000  0.1666670  0.0000000
     Electronegativity: 3.44
       Oxidation state: -2

Interstitials: 
Antisite defects: 

   Dopant element: Na
Electronegativity: 0.93
  Oxidation state: 1

Substituted defects: Na_Ba

Maximum Displacement: 0.2

Exceptionally included: 
Exceptionally excluded: 

Cutoff region of atoms perturbed: 3.0
Symprec: 0.01
Angle tolerance: 5
```

There are so many tips related to `defect.in`.
1. The antisites and substituted defects are determined from the difference of the electronegativity. 
   Although default is 1.0 <span>&#8491;</span>, you can change it using `-e` option to e.g., 1.5.
   ```
   python ~/my_bin/pydefect/pydefect/main.py is -e 1.5
   ```

2. The oxidation states determine the defect charge state.
   For instance, the vacancies of Sn<sup>2+</sup> takes 0, -1, -2, while those of Sn<sup>4+</sup> take 0, -1, -2, -3, -4 charge states.
   In case of interstitials, the interstitials of Sn<sup>2+</sup> takes the 0, +1, +2, while those of Sn<sup>4+</sup> take 0, +1, +2, +3, +4 charge states.
   For the antisites and substituted defects, PyDefect considers all possible combinations of vacancies and interstitials.
   So, for example, Sn<sup>2+</sup>-on-S<sup>2-</sup> takes 0, +1, +2, +3, +4 charge states.
   The oxidation states are determined using the `oxi_state_guesses` method of `Composition` class in `pymatgen`.

3. By default, positions of atoms neighboring a defect are perturbed such that the symmetry is lowered, but it is unwanted in some cases.
   Then, `Maximum Displacement` is simply set to 0.

### 7. Decision of interstitial sites
In addition to vacancies and antisites, one may want to add the interstitials.
For this purpose, we need to determine the interstitial sites.
Most people determine them by seeing the host crystal structures, 
while there are a couple of procedures that recommend the interstitial sites.
However, it is not an easy task to speculate the most likely interstitial sites because they also depend on the substituted element in general.
For instance, when positively charged cations with closed shells are substituted (e.g., Mg<sup>2+</sup>, Al<sup>3+</sup>), 
the largest vacant space should be most likely interstitial sites. 
On the other hand, in case of a proton (H<sup>+</sup>), 
it tends to locate near O<sup>2-</sup> or N<sup>3-</sup> to form the strong O-H or N-H bonding.
Furthermore, a hydride ion (H<sup>-</sup>) should prefer to locate at very much different places. 
Therefore, we need to be careful when determining the interstitial sites.

To add the interstitial site at e.g., 0.375 0.375 0.375, we type
```
python ~/my_bin/pydefect/pydefect/main.py i -c 0.375 0.375 0.375
```

`interstitials.yaml` is then generated, which show information related to the interstitial sites.
```
i1:
  representative_coords: [0.375, 0.375, 0.375]
  wyckoff: a
  site_symmetry: -43m
  symmetry_multiplicity: 64
  coordination_distances:
    Mg: [1.84, 1.84, 1.84, 1.84]
    O: [1.84, 1.84, 1.84, 1.84, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52,
      3.52, 3.52, 3.52]
  method: manual
```
If we want to add another site at e.g. 0.375 0.375 0.5, interstitials.yaml is updated as follows:
```
i1:
  representative_coords: [0.375, 0.375, 0.375]
  wyckoff: a
  site_symmetry: -43m
  symmetry_multiplicity: 64
  coordination_distances:
    Mg: [1.84, 1.84, 1.84, 1.84]
    O: [1.84, 1.84, 1.84, 1.84, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52,
      3.52, 3.52, 3.52]
  method: manual
i2:
  representative_coords: [0.375, 0.375, 0.5]
  wyckoff: c
  site_symmetry: mmm
  symmetry_multiplicity: 192
  coordination_distances:
    Mg: [1.5, 1.5, 2.6, 2.6, 2.6, 2.6]
    O: [1.5, 1.5, 2.6, 2.6, 2.6, 2.6, 3.36, 3.36, 3.36, 3.36]
  method: manual
```

When we try to add the site that is very close to the constituent atoms or other interstitial sites,
you will get the error message as 
```
Inserted position is too close to another interstitial site.
The distance is 0.042 A.
```
However, if we really want to add the site even in such cases, we can do it by adding `--force_add` option.

Once we generate the interstitial.yaml, we also need to modify the `Interstitials` in `defect.in` file
```
Interstitials: i1
```
Or we can type the `is` sub-command again as follows.
```
python ~/my_bin/pydefect/pydefect/main.py is --interstitial_sites i1 i2
```

### 8. Creation of defect calculation directories
We next create directories for point-defect calculations.
```
python ~/my_bin/pydefect/pydefect/main.py dvs
```

With this command, these directories are created.
```
perfect, Na_Ba1_-1, Na_Ba1_0, Na_Ba1_1, Va_Ba1_-2, Va_Ba1_-1, Va_Ba1_0, 
Va_O1_0, Va_O1_1, Va_O1_2, Va_Sn1_0, Va_Sn1_-1, Va_Sn1_-2, Va_Sn1_-3, Va_Sn1_-4
```

If you want to calculate only oxygen vacancies, you can restrict the calculated defects with `-kw` option and a python regular expression,
```
python ~/my_bin/pydefect/pydefect/main.py dvs -kw "Va_O[0-9]?_[0-9]+"
```
, which create these directories.
```
perfect/ Va_O1_0/ Va_O1_1/ Va_O1_2/
```

If you again type the same command, the following information is shown,
```
2019-07-09 17:22:21,078 WARNING pydefect.input_maker.defect_entry_set_maker    perfect already exists, so nothing is done.
2019-07-09 17:22:21,399 WARNING pydefect.input_maker.defect_entry_set_maker    Va_O1_0 already exists, so nothing is done.
2019-07-09 17:22:21,744 WARNING pydefect.input_maker.defect_entry_set_maker    Va_O1_1 already exists, so nothing is done.
2019-07-09 17:22:22,085 WARNING pydefect.input_maker.defect_entry_set_maker    Va_O1_2 already exists, so nothing is done.
```
and no directories are newly created, which is a fail-safe treatment not to delete the calculated directories by mistake.
If you really overwrite the directories, you can use the `--force_overwrite` option.

In each directory, we can find the `defect_entry.json` file, containing information about a point defect obtained before the first-principles calculations.
To see summary of `defect_entry.json`, type
```
python ~/my_bin/pydefect/pydefect/main.py de --print
```

When you'd like to add some particular defects, you can use
```
python ~/my_bin/pydefect/pydefect/main.py dvs -d Va_O1_-1
```
With this command, `Va_O1_-1/` is created.

In some cases, complex defects or peculiar defects such as DX centers need to be generated.
Then, we need to construct `POSCAR`s by hand.
However, PyDefect can generate `defect_entry.json` by parsing the `POSCAR` and `INCAR` files with a defect.

Make `POSCAR` as you want and type the following command to generate the other vasp input set.
```
python ~/my_bin/pydefect/pydefect/main.py vos -t defect -x pbesol --dirs . --charge -1
```
where the charge is assumed to be -1.

And then, type 
```
python ~/my_bin/pydefect/pydefect/main.py de --make_defect_entry
```
to generate `defect_entry.json`.

<p> We also recommend the users to user &Gamma; version of vasp if the k-point sampling is only &Gamma; point for very large supercells.</p>

### 9. Generation of supercell information related to point-defect calculations
After (partly) finishing the vasp calculations, we next parse the calculation results and generate the `dft_results.json` 
that contains the first-principles calculation results related to the defect properties.

By typing,
```
python ~/my_bin/pydefect/pydefect/main.py sr --dir_all
```
you can generate `dft_results.json` in all the directories.
When you want to parse some particular directories, *e.g.*, Va_O1_0, type
```
python ~/my_bin/pydefect/pydefect/main.py sr --dirs Va_O1_0
```

Here, the name of `perfect/` has special meaning, so users **must** use this name for the supercells without defects.

Some calculations might not be finished properly or still ongoing.
To see whether the calculations are properly finished, one can use the `diagnose` (=`d`) sub-command
```
python ~/my_bin/pydefect/pydefect/main.py d
```
which shows like
```
  Va_Ba1_-1/  convergence : F    band edge : UP  :    No in-gap state  DOWN  :       Acceptor PHS
  Va_Ba1_-2/  convergence : T    band edge : UP  :    No in-gap state  DOWN  :    No in-gap state
   Va_Ba1_0/  No supercell results file.
    Va_O1_0/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
    Va_O1_1/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
    Va_O1_2/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
  Va_Sn1_-1/  convergence : T    band edge : UP  :    No in-gap state  DOWN  :    Localized state
  Va_Sn1_-2/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
  Va_Sn1_-3/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
  Va_Sn1_-4/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
   Va_Sn1_0/  convergence : T    band edge : UP  :    No in-gap state  DOWN  :    Localized state
```
If the convergences at the electronic and/or ionic step are not attained, convergence is shown as `F`.
Net to the convergence, we can see band edge information at the spin up (UP) and down (DOWN) channels, which will be explained later.

### 10. Corrections of defect formation energies in finite-size supercells 
When supercell method is adopted, obtained total energies for **charged defects** are not properly estimated due to interaction between a defect, its images, and background charge. 
Therefore, we need to correct total energies of charged defect supercells to predict those in dilute limit.

The corrections are attained using the `extended_fnv_correction` (=`efc`) sub-command,
```
python ~/my_bin/pydefect/pydefect/main.py efc --unitcell_json ../unitcell/unitcell.json --perfect_json perfect/dft_results.json
```

For the corrections, we need the dielectric constants and atomic site potential of perfect supercell.
Therefore, the paths to `unitcell.json` and `dft_results.json` of `perfect` must be assigned.
Bear also in mind that this command takes some time, so we recommend the users to prepare coffee or go on a walk outside during this process.

The correction method adopted in PyDefect at this moment is the so-called extended Freysoldt-Neugebauer-VandeWalle (eFNV) method.
so if one uses the corrections, please cite the following papers.
- [Y. Kumagai*, and F. Oba, Electrostatics-based finite-size corrections for first-principles point defect calculations, Phys. Rev. B, 89 195205 (2014).](https://journals.aps.org/prb/abstract/10.1103/PhysRevB.89.195205)
- [C. Freysoldt, J. Neugebauer, C. Van de Walle, Fully Ab Initio Finite-Size Corrections for Charged-Defect Supercell Calculations, Phys. Rev. Lett., 102 016402 (2009).](https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.102.016402)



### 11. Check defect eigenvalues
Generally, point defects are divided into three types.
First type is the defects with deep localized states in the band gap. 
This type of defect is considered to be detrimental for device performances as the carriers are trapped by the localized states.
Therefore, in the theoretical researches, it is important to know the position of the localized state and its origin.
Second type is the defects without any defect states, which should not affect the electronic properties as long as their concentrations are sufficiently low.
The third type is the defects with hydrogenic states, or perturbed host states (PHS), which are carriers locating at the band edges loosely trapped by the defects.
An examples are the B-on-Si (p-type) and P-on-Si (n-type) in Si.
The wavefunctions of the PHS widespread to several million atoms, and therefore we need such supergiant supercells to estimate their thermodynamical transition levels.  
Therefore, instead, we describe that `the defects have PHS and their transition energies locate near band edges` only qualitatively.
See, for examples.
- [Y. Kumagai*, M. Choi, Y. Nose, and F. Oba, First-principles study of point defects in chalcopyrite ZnSnP2, Phys. Rev. B, 90 125202 (2014).](https://link.aps.org/pdf/10.1103/PhysRevB.90.125202)
- [Y. Kumagai*, L. A. Burton, A. Walsh, and F. Oba, Electronic structure and defect physics of tin sulfides: SnS, Sn2S3, and SnS2, Phys. Rev. Applied, 6 014009 (2016).](https://link.aps.org/doi/10.1103/PhysRevApplied.6.014009)
- [Y. Kumagai*, K. Harada, H. Akamatsu, K. Matsuzaki, and F. Oba, Carrier-Induced Band-Gap Variation and Point Defects in Zn3N2 from First Principles, Phys. Rev. Applied, 8 014015 (2017).](https://journals.aps.org/prapplied/abstract/10.1103/PhysRevApplied.8.014015)
- [Y. Kumagai*, N. Tsunoda, and F. Oba, Point defects and p-type doping in ScN from first principles, Phys. Rev. Applied, 9 034019 (2018).](https://journals.aps.org/prapplied/abstract/10.1103/PhysRevApplied.9.034019)
- [N. Tsunoda, Y. Kumagai*, A. Takahashi, and F. Oba, Electrically benign defect behavior in ZnSnN2 revealed from first principles, Phys. Rev. Applied, 10 011001 (2018).](https://journals.aps.org/prapplied/abstract/10.1103/PhysRevApplied.10.011001)

Due to such a situation, it is important to see the defect levels and determine if the carriers occupy the PHS or defect localized states.
PyDefect show the calculated eigenvalues and the band-edge states by
```
python ~/my_bin/pydefect/pydefect/main.py eig --defect_dir . --unitcell ../../unitcell/unitcell.json --perfect ../perfect/dft_results.json -s eig.png
```
or using the diagnose sub-command as shown above.

The given `eig.png` looks like
![](eig.png)

This is an example of V<sub>Ba</sub><sup>+1</sup>.
Here, one can see occupations of single-particle levels in the spin-up and -down channels.
The x-axis and y-axis are k-point fractional coordinates and energy in the absolute scale, respectively.
The dots on the left and right sides are eigenenergies in the defect (thus V<sub>Ba</sub><sup>+1</sup> here) and the perfect supercells, respectively.
There are also five lines, namely VBM and CBM in the unitcell, those in the perfect supercell, and the Fermi level in the defect supercell.
The numbers in the figure indicate the band indices.

The dots are categorized into 5 colors. 
- Blue, Green, Orange: the occupied, partially occupied (from 0.1 to 0.9), unoccupied eigenstates in the defect supercell, respectively. 
- Red, Purple: the occupied and unoccupied states in the perfect supercell, respectively. 

The  

We emphasize that the automatically determined band-edge states might be incorrect as it is difficult to determine them.
Therefore, please carefully check the band-edge states, and draw the band-decomposed charge density states if the band-edge states are not so obvious.
To make the  

### 12. Plot defect formation energies
