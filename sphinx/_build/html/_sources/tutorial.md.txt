# Tutorial of pydefect
-----------------------

We here illustrate how to use the PyDefect code.
Note that units used in PyDefect are eV and Angstrom for energy and length.

Usually, point-defect calculations in non-metallic solids are intricate as shown in the workflow below;
some tasks can be performed concurrently, while some must follow other tasks.

![](flowchart.png)

Here, we suppose the following directory tree.
The `<project_name>` is usually the name of material sometimes with crystal structure, e.g., rutile-TiO2.
```
<project_name>
 │
 ├ unitcell/ ── structure_opt/
 │            ├ band/
 │            └ dos/
 │            
 ├ competing_phases/ ── <competing_phase 1>
 │                    ├── <competing_phase 2>
 │                    ....
 │  
 └ defects/ ── perfect/  
              ├─ Va_X_0/
              ├─ Va_X_1/
              ├─ Va_X_2/
             ...
```
We recommend the user to follow the same directory structure as this tutorial is assumed it. 
Details of the process are examined step by step.

### 1. Relaxation of unit cell

Since point defect calculations are generally performed at a fully relaxed theoretical structures, 
one begins with optimizing lattice constants and fractional coordinates of atomic positions in the unitcell. 

First, we prepare the POSCAR file for the pristine bulk unitcell, 
and create `unitcell/` directory and `unitcell/structure_opt/` subdirectory and move there. 
In this tutorial, `/` means a directory.
PyDefect can construct the vasp input files namely INCAR, POTCAR, KPOINTS files, for various tasks and exchange-correlation (XC) functional with simple command line tools.
For instance, vasp input files or optimizing structure of unitcell using the PBEsol functional are generated by the following command.
```
python $PATH_TO_PYDEFECT/pydefect/main.py vasp_oba_set -t structure_opt -x pbesol
```
where `vasp_oba_set`, or its abbreviation (`vos`) , is a sub-command option.
In PyDefect, all the sub-commands have their abbreviated sub-commands.
When PyDefect create vasp input files and analyze and visualize vasp output files, 
it uses the VaspObaSet library, written largely on the basis of [pymatgen](http://pymatgen.org) mostly developed by Materials Project team.

In such case, as shown [here](https://pymatgen.org/usage.html) and [here](https://pymatgen.org/_modules/pymatgen/io/vasp/inputs.html), we need to set the PMG_DEFAULT_FUNCTIONAL and PMG_VASP_PSP_DIR at the .pmgrc.yaml file, e.g.,
```
PMG_DEFAULT_FUNCTIONAL: PBE_54
PMG_MAPI_KEY: xxxxxxxxxxxxxxxx
PMG_VASP_PSP_DIR: /home/kuma/potcars/
```
PMG_MAPI_KEY needs to be set as well for querying POSCARs for competing materials structures as shown later.
In VaspObaSet, we provide the default potcar set Oba-group regularly use.
CHANGE THE PROGRAM TO ALLOW USER POTCAR AND MODIFY THIS TUTORIAL.

There are many options for each sub-command, so please refer the help of the sub-command, e.g., by 
```
python ~/my_bin/pydefect/pydefect/main.py vos -h
```
for details.

Note that the structure optimization must be generally iterated with 1.3 times larger cutoff energy until the forces and stresses converge at the first ionic step so as to avoid the error caused by the Pulay Stress.
See [vasp manual](https://cms.mpi.univie.ac.at/vasp/vasp/Volume_vs_energy_volume_relaxations_Pulay_Stress.html) or [wikipedia](https://cms.mpi.univie.ac.at/vasp/vasp/Volume_vs_energy_volume_relaxations_Pulay_Stress.html) for details.
Such iteration of vasp calculations is not supported by PyDefect, but one can easily write the simple scripts to do so.

### 2. Calculation of band, DOS, and dielectric tensor

We then calculate the band structure (BS), density of states (DOS), and dielectric constant.
In the defect calculations, the BS and DOS are used for determining the valence band maximum (VBM) and conduction band minimum (CBM), 
while the dielectric constant that is a sum of electronic and ionic dielectric tensors is needed for correcting the defect formation energies and defect eigenvalues.

First, create `band/`, `dos/` and `dielectric/` in `unitcell/` and type the following command in each directory,
```
python ~/my_bin/pydefect/pydefect/main.py vos -t band -x pbesol
```
```
python ~/my_bin/pydefect/pydefect/main.py vos -t dos -x pbesol
```
```
python ~/my_bin/pydefect/pydefect/main.py vos -t dielectric -x pbesol
```
and run the vasp calculations.
Here, the band path is determined based upon the [seekpath code](https://www.materialscloud.org/work/tools/seekpath), 
so if one uses the plot for publication or presentation, please cite the following paper.
- [Y. Hinuma, G. Pizzi, Y. Kumagai, F. Oba, I. Tanaka, Band structure diagram paths based on crystallography, Comp. Mat. Sci. 128, 140 (2017).](https://www.sciencedirect.com/science/article/pii/S0927025616305110?via%3Dihub) 
  DOI: 10.1016/j.commatsci.2016.10.015 (the "HPKOT" paper; arXiv version: arXiv:1602.06402).

For drawing BS and DOS, PyDefect also provides their plotters based on VaspObaSet with `plot_band` (=`pb`) and `plot_dos` (=`pd`) sub-commands.
Tyep the following commands in `band/` and  `dos/`, respectively. 
```
python ~/my_bin/phos_pbesol/obadb/obadb/analyzer/main.py pb -v vasprun.xml -k KPOINTS -f band.pdf
```
```
python ~/my_bin/phos_pbesol/obadb/obadb/analyzer/main.py pd -v vasprun.xml -f dos.pdf
```

### 3. Gathering unitcell information related to point-defect calculations

We next collect the bulk information relevant to point-defect calculations, namely band edges (for defect-formation energies), 
electronic and ionic contributions to dielectric tensor (for corrections), unitcell volume, and unitcell DOS (both for carrier and defect concentrations),
using the `unitcell_results` (=`ur`) sub-command.
```
python ~/my_bin/pydefect/pydefect/main.py ur --static_diele_dir dielectric --ionic_diele_dir dielectric --band_edge_dir band --volume_dir dielectric --total_dos_dir dos --json_file unitcell.json -o OUTCAR-finish -p POSCAR-finish -v vasprun.xml
```
In this command, we suppose the situation where the OUTCAR and CONTCAR files are renamed and specify these files using `-o` and `-p` options, respectively.
With this command, `unitcell.json` is generated that will be used for the analysis later.
Generally, json file is less readable for human beings, so we usually implement `print` option to show readable information from json files, like
```
python ~/my_bin/pydefect/pydefect/main.py ur --print
```
Here, we show an example of unitcell info.
```
vbm (eV): 3.4103
cbm (eV): 4.4278
static dielectric tensor:
[[ 4.680097 -0.       -0.      ]
 [-0.        4.680097  0.      ]
 [ 0.       -0.        4.680097]]
ionic dielectric tensor:
[[14.953044 -0.        0.      ]
 [-0.       14.953065 -0.      ]
 [ 0.       -0.       14.953038]]
total dielectric tensor:
[[19.633141000000002, -0.0, 0.0], [-0.0, 19.633162, 0.0], [0.0, -0.0, 19.633135]]
volume (A^3): 68.98647886527607
Total DOS: Exists
```
Since information of total dos is so long, we show only whether it exists.

### 4. Calculation of competing phases
When a defect is introduced, atoms are exchanged with the hypothetical atomic reservoirs within the thermodynamics framework.
In order to calculate free energy of defect formation that is approximated with the defect formation energy in most cases,
we need to set the chemical potentials of exchanged atoms accompanied with creating defects.
Usually, we consider the chemical potentials at the condition where competing phases coexist with the host material,
and for this purpose, need to calculate the chemical potential diagram.

First, we create `competing_phases/` and create directories for competing phases including VASP input sets in each directory.
Using the chempotdiag library developed and managed by Akira Takahashi, we can retrieve POSCARs of the stable or slightly unstable competing phases from [the Materials Project (MP)](https://materialsproject.org).
For this purpose, one needs [the API keys](https://materialsproject.org/open) of the MP as mentioned above.
Here, we show an example
We obtain the competing materials with BaSnO of which energy above hull is less than 0.5 meV/atom are collected with 
```
python ~/my_bin/phos_pbesol/obadb/obadb/analyzer/chempotdiag/main.py cpd -m -el Ba Sn O -ch 0.05
```
Particular molecules, namely O2, N2, F2, H2O, N2, NH3, NO2, P2, and P4, are exceptions and their POSCARs are not retrieved from MP as they have been calculated as solids in MP, but created by chempotdiag.

We then generate `INCAR`, `POTCAR`, `KPOINTS` files for each solid or molecule.
In order to compare the total energies, we need to use the same cutoff energy, `ENCUT`.
Furthermore, we need to increase the `ENCUT` up to 1.3 times of max `ENMAX` between the constituent POTCARs.
In case of BaSnO3, as `ENMAX` of Ba, Sn, and O are 187.181, 103.236, 400.0, and so we need to set `ENCUT = 520`,
This is possible with `-is` option, meaning INCAR settings.
```
python ~/my_bin/pydefect/pydefect/main.py vos -t structure_opt -x pbesol -is ENCUT 520 --dirs *_*/
```

Note, if competing phases are gases, we need to change the `ISIF` to 2 so as not to relax the lattice constants.
In such case, type as follows,
```
python ~/my_bin/pydefect/pydefect/main.py vos -t structure_opt -x pbesol -is ENCUT 520 ISIF 2 --dirs O2molecule_pydefect
```
where O2molecule_pydefect is a directory for the O2 molecule model. 

After finishing the vasp calculations, we generate the chemical potential diagram with
```
python ~/my_bin/phos_pbesol/obadb/obadb/analyzer/chempotdiag/main.py cpd -v */ -p POSCAR-finish -o OUTCAR-finish -c BaSnO3 -y -s cpd_BaSnO3.pdf
```
Note that there are parameters for gas phases that set the partial pressure and temperature for chemical potentials (read help for more details).
With this command, we depict the Ba-Sn-O chemical potential diagram saved as `cpd_BaSnO3.pdf` 
![](cpd_BaSnO3.png)
and values at the vertices at the BaSnO3 region written in `vertices_BaSnO3.yaml` as shown
```
A: {Ba: -6.339048510000005, O: -0.18899787319844918, Sn: -5.638818995000001}
B: {Ba: -5.9688971474999875, O: -0.22601300944845448, Sn: -5.897924948750013}
C: {Ba: -5.257239969999993, O: -0.5818415981984444, Sn: -5.542096360000016}
D: {Ba: -2.4861917899999817, O: -3.3528897781984526, Sn: 3.552713678800501e-15}
E: {Ba: -3.2221928749999975, O: -3.1075560831984568, Sn: 3.552713678800501e-15}
F: {Ba: -3.6187877250000113, O: -2.9092586581984463, Sn: -0.19829742500001046}
compound: BaSnO3
pressure: null
standard_energy: {Ba: -2.141765, O: -4.872655801801549, Sn: -4.1937075}
temperature: 0
```
Here, `standard_energy` are the energies of the most stable simple substances or simple gas phases, 
and A--F show the relative chemical potentials at the vertices shown in `cpd_BaSnO3.pdf`. 

### 5. Select of a supercell
So far, we have finished the calculations of the unit cell and competing phases, and are eventually ready for point defect calculations. 
Let's create `defect/` directory and copy unitcell `POSCAR` file from e.g. `unitcell/dos/` to `defect/`

Firstly, we need to determine the shape and size of the supercell.
PyDefect recommends a nearly isotropic supercell composed of moderate number of atoms.
For this purpose, use the `recommend_supercell` (=`rs`) sub-command,
```
python ~/my_bin/pydefect/pydefect/main.py rs
```
Then, `UPOSCAR` and `SPOSCAR` that are the POSCARs for the unitcell and supercell, respectively, are generated.

### 6. Construction of defect initial setting
We then create the initial setting file for point defects with the following command.
```
python ~/my_bin/pydefect/pydefect/main.py is
```
With this command, we can build the `defect.in` file, which contains the full information on what kind of defects are to be generated automatically.
At the same time, `DPOSCAR`, POSCAR used for the defect calculations, is created. 
If one follows this tutorial, DPOSCAR file is the same as SPOSCAR, while if one uses their own supercell POSCAR, the sequence of elements could be changed.

An example of `defect.in` is as follows:
```
  Space group: Pm-3m

Transformation matrix:  3  3  3
Cell multiplicity: 27

   Irreducible element: Ba1
        Wyckoff letter: a
         Site symmetry: m-3m
          Coordination: O2-: 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 
      Equivalent atoms: 1..27
Fractional coordinates: 0.1666670  0.1666670  0.1666670
     Electronegativity: 0.89
       Oxidation state: 2

   Irreducible element: Sn1
        Wyckoff letter: b
         Site symmetry: m-3m
          Coordination: O2-: 2.05 2.05 2.05 2.05 2.05 2.05 
      Equivalent atoms: 28..54
Fractional coordinates: 0.0000000  0.0000000  0.0000000
     Electronegativity: 1.96
       Oxidation state: 4
       
   Irreducible element: O1
        Wyckoff letter: c
         Site symmetry: 4/mmm
          Coordination: Ba2+: 2.9 2.9 2.9 2.9 Sn4+: 2.05 2.05 O2-: 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 
      Equivalent atoms: 55..135
Fractional coordinates: 0.0000000  0.1666670  0.0000000
     Electronegativity: 3.44
       Oxidation state: -2

Interstitials: 
Antisite defects: 

Substituted defects: 

Maximum Displacement: 0.2

Exceptionally included: 
Exceptionally excluded: 

Cutoff region of atoms perturbed: 3.0
Symprec: 0.01
Angle tolerance: 5
```

If we want to add dopants a posteriori, we can type as follows.
```
python ~/my_bin/pydefect/pydefect/main.py is --print_dopant Na
```
This example of Na dopant shows 
```
   Dopant element: Na
Electronegativity: 0.93
  Oxidation state: 1
```

By inserting this to `defect.in` and modify `Substituted defects` as follows
```
  Space group: Pm-3m

Transformation matrix:  3  3  3
Cell multiplicity: 27

   Irreducible element: Ba1
        Wyckoff letter: a
         Site symmetry: m-3m
          Coordination: O2-: 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 
      Equivalent atoms: 1..27
Fractional coordinates: 0.1666670  0.1666670  0.1666670
     Electronegativity: 0.89
       Oxidation state: 2

   Irreducible element: Sn1
        Wyckoff letter: b
         Site symmetry: m-3m
          Coordination: O2-: 2.05 2.05 2.05 2.05 2.05 2.05 
      Equivalent atoms: 28..54
Fractional coordinates: 0.0000000  0.0000000  0.0000000
     Electronegativity: 1.96
       Oxidation state: 4

   Irreducible element: O1
        Wyckoff letter: c
         Site symmetry: 4/mmm
          Coordination: Ba2+: 2.9 2.9 2.9 2.9 Sn4+: 2.05 2.05 O2-: 2.9 2.9 2.9 2.9 2.9 2.9 2.9 2.9 
      Equivalent atoms: 55..135
Fractional coordinates: 0.0000000  0.1666670  0.0000000
     Electronegativity: 3.44
       Oxidation state: -2

Interstitials: 
Antisite defects: 

   Dopant element: Na
Electronegativity: 0.93
  Oxidation state: 1

Substituted defects: Na_Ba

Maximum Displacement: 0.2

Exceptionally included: 
Exceptionally excluded: 

Cutoff region of atoms perturbed: 3.0
Symprec: 0.01
Angle tolerance: 5
```

There are so many tips related to `defect.in`.
1. The antisites and substituted defects are determined from the difference of the electronegativity (default is 1.0.
   If you want to change the difference of the electronegativity, you can use `-e` option.
   ```
   python ~/my_bin/pydefect/pydefect/main.py is -e 1.5
   ```
    

2. The oxidation states determine the defect charge state.


### 7. Decision of interstitial sites
In addition to vacancies and antisites, one may want to add the interstitials.
For this purpose, we need to determine the interstitial sites.
Most people determine the interstitial sites by seeing the host crystal structures, 
while there are a couple of procedures that recommend the interstitial sites.

However, it is not an easy task to speculate the most likely interstitial sites 
because they depend on the substituted atoms in general.
For instance, when positively charged cations with closed shells are substituted (e.g., Mg<sup>2+</sup>, Al<sup>3+</sup>), 
the largest vacant space should be most likely interstitial sites. 
On the other hand, in case of a proton (H<sup>+</sup>), 
it tends to locate near O<sup>2-</sup> or N<sup>3-</sup> to form the strong O-H or N-H bonding.
Furthermore, a hydride ion (H<sup>-</sup>) should prefer to locate at very much different places. 
Therefore, we need to be careful when determining the interstitial sites.

To add the interstitial site at e.g., 0.375 0.375 0.375, we type
```
python ~/my_bin/pydefect/pydefect/main.py i -c 0.375 0.375 0.375
```

interstitials.yaml is then generated, which show various information related to the interstitial sites.
```
i1:
  representative_coords: [0.375, 0.375, 0.375]
  wyckoff: a
  site_symmetry: -43m
  symmetry_multiplicity: 64
  coordination_distances:
    Mg: [1.84, 1.84, 1.84, 1.84]
    O: [1.84, 1.84, 1.84, 1.84, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52,
      3.52, 3.52, 3.52]
  method: manual
```
If we add another site at e.g. 0.375 0.375 0.5, interstitials.yaml is updated as follows:
```
i1:
  representative_coords: [0.375, 0.375, 0.375]
  wyckoff: a
  site_symmetry: -43m
  symmetry_multiplicity: 64
  coordination_distances:
    Mg: [1.84, 1.84, 1.84, 1.84]
    O: [1.84, 1.84, 1.84, 1.84, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52, 3.52,
      3.52, 3.52, 3.52]
  method: manual
i2:
  representative_coords: [0.375, 0.375, 0.5]
  wyckoff: c
  site_symmetry: mmm
  symmetry_multiplicity: 192
  coordination_distances:
    Mg: [1.5, 1.5, 2.6, 2.6, 2.6, 2.6]
    O: [1.5, 1.5, 2.6, 2.6, 2.6, 2.6, 3.36, 3.36, 3.36, 3.36]
  method: manual
```

When we try to add the site that is very close to the constituent atoms or other interstitial sites,
you will get the error message as 
```
Inserted position is too close to another interstitial site.
The distance is 0.042 A.
```
However, if we really want to add the site even in such cases, we can do it by adding `--force_add` option.

Once we generate the interstitial.yaml, we also need to modify the `Interstitials` in `defect.in` file
```
Interstitials: i1
```
Or we can type subparse `is` as follows again.
```
python ~/my_bin/pydefect/pydefect/main.py is --interstitial_sites i1 i2
```

### 8. Creation of defect calculation directories
We next create directories for point defect supercell calculations.
```
python ~/my_bin/pydefect/pydefect/main.py dvs
```
With this command, these directories are created.
```
perfect, Na_Ba1_-1, Na_Ba1_0, Na_Ba1_1, Va_Ba1_-2, Va_Ba1_-1, Va_Ba1_0, 
Va_O1_0, Va_O1_1, Va_O1_2, Va_Sn1_0, Va_Sn1_-1, Va_Sn1_-2, Va_Sn1_-3, Va_Sn1_-4
```

If you want to calculate only oxygen vacancies, you can restrict the calculated defects with a regular expression,
```
python ~/my_bin/pydefect/pydefect/main.py dvs -kw "Va_O[0-9]?_[0-9]+"
```
With this command, these directories are created.
```
perfect, Va_O1_0, Va_O1_1, Va_O1_2
```
If you again type the same command, the following information is shown,
```
2019-07-09 17:22:21,044 INFO obadb.vasp.input_set Band gap info: None
2019-07-09 17:22:21,057 INFO obadb.vasp.input_set Magnetization: False
2019-07-09 17:22:21,078 WARNING pydefect.input_maker.defect_entry_set_maker    perfect already exists, so nothing is done.
2019-07-09 17:22:21,086 INFO obadb.vasp.input_set Band gap info: None
2019-07-09 17:22:21,379 INFO obadb.vasp.input_set The given structure is a standardized primitive.
2019-07-09 17:22:21,384 INFO obadb.vasp.input_set Magnetization: False
2019-07-09 17:22:21,399 WARNING pydefect.input_maker.defect_entry_set_maker    Va_O1_0 already exists, so nothing is done.
2019-07-09 17:22:21,438 INFO obadb.vasp.input_set Band gap info: None
2019-07-09 17:22:21,726 INFO obadb.vasp.input_set The given structure is a standardized primitive.
2019-07-09 17:22:21,730 INFO obadb.vasp.input_set Magnetization: False
2019-07-09 17:22:21,744 WARNING pydefect.input_maker.defect_entry_set_maker    Va_O1_1 already exists, so nothing is done.
2019-07-09 17:22:21,782 INFO obadb.vasp.input_set Band gap info: None
2019-07-09 17:22:22,068 INFO obadb.vasp.input_set The given structure is a standardized primitive.
2019-07-09 17:22:22,072 INFO obadb.vasp.input_set Magnetization: False
2019-07-09 17:22:22,085 WARNING pydefect.input_maker.defect_entry_set_maker    Va_O1_2 already exists, so nothing is done.
```
and no directories are newly created, which is a fail-safe treatment not to delete the calculated directories by mistake.

In each directory, we can find the `defect_entry.json` file, which contains the information about the point defect obtained
before the first-principles calculations.
To see summary of defect_entry.json, type
```
python ~/my_bin/pydefect/pydefect/main.py de
```

### 9. Generation of supercell information related to point-defect calculations
We next parse the calculation results and generate the `dft_results.json` 
that contains the first-principles calculation results related to defect properties.
By typing,
```
python ~/my_bin/pydefect/pydefect/main.py sr --dir_all
```
you can generate `dft_results.json` in all the directories.

Some calculations might not be finished properly
To see whether the calculations are properly finished, one can use subparse of `diagnose` or `d`
```
python ~/my_bin/pydefect/pydefect/main.py d
```
which shows like
```
  Va_Ba1_-1/  convergence : T    band edge : UP  :    No in-gap state  DOWN  :       Acceptor PHS
  Va_Ba1_-2/  convergence : T    band edge : UP  :    No in-gap state  DOWN  :    No in-gap state
   Va_Ba1_0/  No supercell results file.
    Va_O1_0/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
    Va_O1_1/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
    Va_O1_2/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
  Va_Sn1_-1/  convergence : T    band edge : UP  :    No in-gap state  DOWN  :    Localized state
  Va_Sn1_-2/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
  Va_Sn1_-3/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
  Va_Sn1_-4/  convergence : T    band edge : UP  :    Localized state  DOWN  :    Localized state
   Va_Sn1_0/  convergence : T    band edge : UP  :    No in-gap state  DOWN  :    Localized state

```
If the convergences at the electronic and/or ionic step are not attained, convergence becomes `F`.
After the convergence, we can see band edge information, which will be explained later.

### 10. Corrections of defect formation energies in finite-size supercell 
Because of the background charge and image charges, the obtained total energies for **charged defects** are not proper.
Therefore, we need to correct the energies to those in dilute limit.
The corrections are attained by using subparse extended_fnv_correction or efc,
```
python ~/my_bin/pydefect/pydefect/main.py efc --unitcell_json ../unitcell/unitcell.json --perfect_json perfect/dft_results.json
```
For the corrections, we need the dielectric constants and atomic site potential of perfect supercell.
Therefore, the paths to `unitcell.json` and `dft_results.json` of `perfect` are assigned.
Bear also in mind that this command takes some time.

### 11. Check defect eigenvalues
Generally, wavefunctions of perturbed host states (PHS) widespread to several million atoms, and
it is therefore not straightforward to estimate the thermodynamical transition levels of these PHS.
Instead, we recommend to show that defects have PHS and their transition energies locate near band edges qualitatively.

For this purpose, we need to determine if the carriers occupy the PHS or defect localized states.
And PyDefect suggest the band-edge states as shown above using diagnose.
```
python ~/my_bin/pydefect/pydefect/main.py eig --defect_dir . --unitcell ../../unitcell/unitcell.json --perfect ../perfect/dft_results.json -s eig.png
```


 

### 12. Plot defect formation energies
