import sys
import math
import numpy as np
from ase.io.vasp import read_vasp, write_vasp
from ase_cython import find_optimal_cell_shape
from ase.build import get_deviation_from_optimal_cell_shape
from ase.build import make_supercell

path = sys.argv[1]
poscar = read_vasp(path)
unitcell_natoms = int(str(poscar.get_number_of_atoms()))
MIN_ATOM = 50
MAX_ATOM = 400
MIN_ATOM_MODIFIED = MIN_ATOM + unitcell_natoms - (MIN_ATOM % unitcell_natoms)
print("natom of unitcell = " + str(unitcell_natoms))

criterion = 0.5
print("criterion = " + str(criterion))

screened_supercell = None
screened_natom = None
screened_dev = None
screened_p = None
min_dev = float("inf")
for natom in range(MAX_ATOM+1, MIN_ATOM_MODIFIED, -unitcell_natoms):
    num_target_cell = math.floor(float(natom) / int(unitcell_natoms))
    print("num_target_cell = " + str(int(num_target_cell)))
    P = find_optimal_cell_shape(poscar.cell, num_target_cell)
    supercell = make_supercell(poscar, P)

    natom_super = str(supercell.get_number_of_atoms())
    dev = get_deviation_from_optimal_cell_shape(np.dot(P, poscar.cell))
    print("natom(super) = " + natom_super + " , dev = " + str(dev))
    if dev < criterion:
        screened_supercell = supercell
        screened_natom = natom
        screened_dev = dev
        screened_p = P
    else:
        if dev < min_dev:
            min_dev = dev
        continue

print("-" * 50)

if screened_supercell is None:
    print("Not found supercell which dev is smaller than criterion.")
    print("minimum dev is " + str(min_dev))
    print("Program exit and no poscar is output.")
    sys.exit()

print("Found supercell which dev is smaller than criterion.")
print("SCREENED: natom(super) = " + str(screened_natom) + " , dev = " + str(screened_dev))

axis = screened_supercell.get_cell()
norms = [np.linalg.norm(v) for v in axis]
def degree_angle(v1, v2):
    l1 = np.linalg.norm(v1)
    l2 = np.linalg.norm(v2)
    dot = np.dot(v1, v2)
    cos = dot / (l1 * l2)
    rad = np.arccos(cos)
    return np.degrees(rad)
alpha = degree_angle(axis[1], axis[2])
beta = degree_angle(axis[2], axis[0])
gamma = degree_angle(axis[0], axis[1])
natom_super = int(screened_supercell.get_number_of_atoms())
label_str = "Generated by ASE. length = ( {0} ), angle=( {1}, {2}, {3} ), natom= {4}".format(norms , alpha, beta, gamma, natom_super)
print(label_str)
print("supercell = ")
print(screened_p)
write_vasp(path+"-supercell", screened_supercell, label=label_str, direct=True, sort=True)
